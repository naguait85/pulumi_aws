# coding=utf-8
# *** WARNING: this file was generated by crd2pulumi. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs

__all__ = [
    'ApplicationOperation',
    'ApplicationOperationInfo',
    'ApplicationOperationInitiatedBy',
    'ApplicationOperationRetry',
    'ApplicationOperationRetryBackoff',
    'ApplicationOperationSync',
    'ApplicationOperationSyncResources',
    'ApplicationOperationSyncSource',
    'ApplicationOperationSyncSourceDirectory',
    'ApplicationOperationSyncSourceDirectoryJsonnet',
    'ApplicationOperationSyncSourceDirectoryJsonnetExtVars',
    'ApplicationOperationSyncSourceDirectoryJsonnetTlas',
    'ApplicationOperationSyncSourceHelm',
    'ApplicationOperationSyncSourceHelmFileParameters',
    'ApplicationOperationSyncSourceHelmParameters',
    'ApplicationOperationSyncSourceKsonnet',
    'ApplicationOperationSyncSourceKsonnetParameters',
    'ApplicationOperationSyncSourceKustomize',
    'ApplicationOperationSyncSourcePlugin',
    'ApplicationOperationSyncSourcePluginEnv',
    'ApplicationOperationSyncSyncStrategy',
    'ApplicationOperationSyncSyncStrategyApply',
    'ApplicationOperationSyncSyncStrategyHook',
    'ApplicationSpec',
    'ApplicationSpecDestination',
    'ApplicationSpecIgnoreDifferences',
    'ApplicationSpecInfo',
    'ApplicationSpecSource',
    'ApplicationSpecSourceDirectory',
    'ApplicationSpecSourceDirectoryJsonnet',
    'ApplicationSpecSourceDirectoryJsonnetExtVars',
    'ApplicationSpecSourceDirectoryJsonnetTlas',
    'ApplicationSpecSourceHelm',
    'ApplicationSpecSourceHelmFileParameters',
    'ApplicationSpecSourceHelmParameters',
    'ApplicationSpecSourceKsonnet',
    'ApplicationSpecSourceKsonnetParameters',
    'ApplicationSpecSourceKustomize',
    'ApplicationSpecSourcePlugin',
    'ApplicationSpecSourcePluginEnv',
    'ApplicationSpecSyncPolicy',
    'ApplicationSpecSyncPolicyAutomated',
    'ApplicationSpecSyncPolicyRetry',
    'ApplicationSpecSyncPolicyRetryBackoff',
    'ApplicationStatus',
    'ApplicationStatusConditions',
    'ApplicationStatusHealth',
    'ApplicationStatusHistory',
    'ApplicationStatusHistorySource',
    'ApplicationStatusHistorySourceDirectory',
    'ApplicationStatusHistorySourceDirectoryJsonnet',
    'ApplicationStatusHistorySourceDirectoryJsonnetExtVars',
    'ApplicationStatusHistorySourceDirectoryJsonnetTlas',
    'ApplicationStatusHistorySourceHelm',
    'ApplicationStatusHistorySourceHelmFileParameters',
    'ApplicationStatusHistorySourceHelmParameters',
    'ApplicationStatusHistorySourceKsonnet',
    'ApplicationStatusHistorySourceKsonnetParameters',
    'ApplicationStatusHistorySourceKustomize',
    'ApplicationStatusHistorySourcePlugin',
    'ApplicationStatusHistorySourcePluginEnv',
    'ApplicationStatusOperationState',
    'ApplicationStatusOperationStateOperation',
    'ApplicationStatusOperationStateOperationInfo',
    'ApplicationStatusOperationStateOperationInitiatedBy',
    'ApplicationStatusOperationStateOperationRetry',
    'ApplicationStatusOperationStateOperationRetryBackoff',
    'ApplicationStatusOperationStateOperationSync',
    'ApplicationStatusOperationStateOperationSyncResources',
    'ApplicationStatusOperationStateOperationSyncSource',
    'ApplicationStatusOperationStateOperationSyncSourceDirectory',
    'ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnet',
    'ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetExtVars',
    'ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetTlas',
    'ApplicationStatusOperationStateOperationSyncSourceHelm',
    'ApplicationStatusOperationStateOperationSyncSourceHelmFileParameters',
    'ApplicationStatusOperationStateOperationSyncSourceHelmParameters',
    'ApplicationStatusOperationStateOperationSyncSourceKsonnet',
    'ApplicationStatusOperationStateOperationSyncSourceKsonnetParameters',
    'ApplicationStatusOperationStateOperationSyncSourceKustomize',
    'ApplicationStatusOperationStateOperationSyncSourcePlugin',
    'ApplicationStatusOperationStateOperationSyncSourcePluginEnv',
    'ApplicationStatusOperationStateOperationSyncSyncStrategy',
    'ApplicationStatusOperationStateOperationSyncSyncStrategyApply',
    'ApplicationStatusOperationStateOperationSyncSyncStrategyHook',
    'ApplicationStatusOperationStateSyncResult',
    'ApplicationStatusOperationStateSyncResultResources',
    'ApplicationStatusOperationStateSyncResultSource',
    'ApplicationStatusOperationStateSyncResultSourceDirectory',
    'ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnet',
    'ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetExtVars',
    'ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetTlas',
    'ApplicationStatusOperationStateSyncResultSourceHelm',
    'ApplicationStatusOperationStateSyncResultSourceHelmFileParameters',
    'ApplicationStatusOperationStateSyncResultSourceHelmParameters',
    'ApplicationStatusOperationStateSyncResultSourceKsonnet',
    'ApplicationStatusOperationStateSyncResultSourceKsonnetParameters',
    'ApplicationStatusOperationStateSyncResultSourceKustomize',
    'ApplicationStatusOperationStateSyncResultSourcePlugin',
    'ApplicationStatusOperationStateSyncResultSourcePluginEnv',
    'ApplicationStatusResources',
    'ApplicationStatusResourcesHealth',
    'ApplicationStatusSummary',
    'ApplicationStatusSync',
    'ApplicationStatusSyncComparedTo',
    'ApplicationStatusSyncComparedToDestination',
    'ApplicationStatusSyncComparedToSource',
    'ApplicationStatusSyncComparedToSourceDirectory',
    'ApplicationStatusSyncComparedToSourceDirectoryJsonnet',
    'ApplicationStatusSyncComparedToSourceDirectoryJsonnetExtVars',
    'ApplicationStatusSyncComparedToSourceDirectoryJsonnetTlas',
    'ApplicationStatusSyncComparedToSourceHelm',
    'ApplicationStatusSyncComparedToSourceHelmFileParameters',
    'ApplicationStatusSyncComparedToSourceHelmParameters',
    'ApplicationStatusSyncComparedToSourceKsonnet',
    'ApplicationStatusSyncComparedToSourceKsonnetParameters',
    'ApplicationStatusSyncComparedToSourceKustomize',
    'ApplicationStatusSyncComparedToSourcePlugin',
    'ApplicationStatusSyncComparedToSourcePluginEnv',
]

@pulumi.output_type
class ApplicationOperation(dict):
    """
    Operation contains information about a requested or running operation
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "initiatedBy":
            suggest = "initiated_by"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationOperation. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationOperation.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationOperation.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 info: Optional[Sequence['outputs.ApplicationOperationInfo']] = None,
                 initiated_by: Optional['outputs.ApplicationOperationInitiatedBy'] = None,
                 retry: Optional['outputs.ApplicationOperationRetry'] = None,
                 sync: Optional['outputs.ApplicationOperationSync'] = None):
        """
        Operation contains information about a requested or running operation
        :param Sequence['ApplicationOperationInfoArgs'] info: Info is a list of informational items for this operation
        :param 'ApplicationOperationInitiatedByArgs' initiated_by: InitiatedBy contains information about who initiated the operations
        :param 'ApplicationOperationRetryArgs' retry: Retry controls the strategy to apply if a sync fails
        :param 'ApplicationOperationSyncArgs' sync: Sync contains parameters for the operation
        """
        if info is not None:
            pulumi.set(__self__, "info", info)
        if initiated_by is not None:
            pulumi.set(__self__, "initiated_by", initiated_by)
        if retry is not None:
            pulumi.set(__self__, "retry", retry)
        if sync is not None:
            pulumi.set(__self__, "sync", sync)

    @property
    @pulumi.getter
    def info(self) -> Optional[Sequence['outputs.ApplicationOperationInfo']]:
        """
        Info is a list of informational items for this operation
        """
        return pulumi.get(self, "info")

    @property
    @pulumi.getter(name="initiatedBy")
    def initiated_by(self) -> Optional['outputs.ApplicationOperationInitiatedBy']:
        """
        InitiatedBy contains information about who initiated the operations
        """
        return pulumi.get(self, "initiated_by")

    @property
    @pulumi.getter
    def retry(self) -> Optional['outputs.ApplicationOperationRetry']:
        """
        Retry controls the strategy to apply if a sync fails
        """
        return pulumi.get(self, "retry")

    @property
    @pulumi.getter
    def sync(self) -> Optional['outputs.ApplicationOperationSync']:
        """
        Sync contains parameters for the operation
        """
        return pulumi.get(self, "sync")


@pulumi.output_type
class ApplicationOperationInfo(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationOperationInitiatedBy(dict):
    """
    InitiatedBy contains information about who initiated the operations
    """
    def __init__(__self__, *,
                 automated: Optional[bool] = None,
                 username: Optional[str] = None):
        """
        InitiatedBy contains information about who initiated the operations
        :param bool automated: Automated is set to true if operation was initiated automatically by the application controller.
        :param str username: Username contains the name of a user who started operation
        """
        if automated is not None:
            pulumi.set(__self__, "automated", automated)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def automated(self) -> Optional[bool]:
        """
        Automated is set to true if operation was initiated automatically by the application controller.
        """
        return pulumi.get(self, "automated")

    @property
    @pulumi.getter
    def username(self) -> Optional[str]:
        """
        Username contains the name of a user who started operation
        """
        return pulumi.get(self, "username")


@pulumi.output_type
class ApplicationOperationRetry(dict):
    """
    Retry controls the strategy to apply if a sync fails
    """
    def __init__(__self__, *,
                 backoff: Optional['outputs.ApplicationOperationRetryBackoff'] = None,
                 limit: Optional[int] = None):
        """
        Retry controls the strategy to apply if a sync fails
        :param 'ApplicationOperationRetryBackoffArgs' backoff: Backoff controls how to backoff on subsequent retries of failed syncs
        :param int limit: Limit is the maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.
        """
        if backoff is not None:
            pulumi.set(__self__, "backoff", backoff)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)

    @property
    @pulumi.getter
    def backoff(self) -> Optional['outputs.ApplicationOperationRetryBackoff']:
        """
        Backoff controls how to backoff on subsequent retries of failed syncs
        """
        return pulumi.get(self, "backoff")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        """
        Limit is the maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.
        """
        return pulumi.get(self, "limit")


@pulumi.output_type
class ApplicationOperationRetryBackoff(dict):
    """
    Backoff controls how to backoff on subsequent retries of failed syncs
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxDuration":
            suggest = "max_duration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationOperationRetryBackoff. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationOperationRetryBackoff.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationOperationRetryBackoff.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 duration: Optional[str] = None,
                 factor: Optional[int] = None,
                 max_duration: Optional[str] = None):
        """
        Backoff controls how to backoff on subsequent retries of failed syncs
        :param str duration: Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. "2m", "1h")
        :param int factor: Factor is a factor to multiply the base duration after each failed retry
        :param str max_duration: MaxDuration is the maximum amount of time allowed for the backoff strategy
        """
        if duration is not None:
            pulumi.set(__self__, "duration", duration)
        if factor is not None:
            pulumi.set(__self__, "factor", factor)
        if max_duration is not None:
            pulumi.set(__self__, "max_duration", max_duration)

    @property
    @pulumi.getter
    def duration(self) -> Optional[str]:
        """
        Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. "2m", "1h")
        """
        return pulumi.get(self, "duration")

    @property
    @pulumi.getter
    def factor(self) -> Optional[int]:
        """
        Factor is a factor to multiply the base duration after each failed retry
        """
        return pulumi.get(self, "factor")

    @property
    @pulumi.getter(name="maxDuration")
    def max_duration(self) -> Optional[str]:
        """
        MaxDuration is the maximum amount of time allowed for the backoff strategy
        """
        return pulumi.get(self, "max_duration")


@pulumi.output_type
class ApplicationOperationSync(dict):
    """
    Sync contains parameters for the operation
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dryRun":
            suggest = "dry_run"
        elif key == "syncOptions":
            suggest = "sync_options"
        elif key == "syncStrategy":
            suggest = "sync_strategy"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationOperationSync. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationOperationSync.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationOperationSync.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dry_run: Optional[bool] = None,
                 manifests: Optional[Sequence[str]] = None,
                 prune: Optional[bool] = None,
                 resources: Optional[Sequence['outputs.ApplicationOperationSyncResources']] = None,
                 revision: Optional[str] = None,
                 source: Optional['outputs.ApplicationOperationSyncSource'] = None,
                 sync_options: Optional[Sequence[str]] = None,
                 sync_strategy: Optional['outputs.ApplicationOperationSyncSyncStrategy'] = None):
        """
        Sync contains parameters for the operation
        :param bool dry_run: DryRun specifies to perform a `kubectl apply --dry-run` without actually performing the sync
        :param Sequence[str] manifests: Manifests is an optional field that overrides sync source with a local directory for development
        :param bool prune: Prune specifies to delete resources from the cluster that are no longer tracked in git
        :param Sequence['ApplicationOperationSyncResourcesArgs'] resources: Resources describes which resources shall be part of the sync
        :param str revision: Revision is the revision (Git) or chart version (Helm) which to sync the application to If omitted, will use the revision specified in app spec.
        :param 'ApplicationOperationSyncSourceArgs' source: Source overrides the source definition set in the application. This is typically set in a Rollback operation and is nil during a Sync operation
        :param Sequence[str] sync_options: SyncOptions provide per-sync sync-options, e.g. Validate=false
        :param 'ApplicationOperationSyncSyncStrategyArgs' sync_strategy: SyncStrategy describes how to perform the sync
        """
        if dry_run is not None:
            pulumi.set(__self__, "dry_run", dry_run)
        if manifests is not None:
            pulumi.set(__self__, "manifests", manifests)
        if prune is not None:
            pulumi.set(__self__, "prune", prune)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)
        if revision is not None:
            pulumi.set(__self__, "revision", revision)
        if source is not None:
            pulumi.set(__self__, "source", source)
        if sync_options is not None:
            pulumi.set(__self__, "sync_options", sync_options)
        if sync_strategy is not None:
            pulumi.set(__self__, "sync_strategy", sync_strategy)

    @property
    @pulumi.getter(name="dryRun")
    def dry_run(self) -> Optional[bool]:
        """
        DryRun specifies to perform a `kubectl apply --dry-run` without actually performing the sync
        """
        return pulumi.get(self, "dry_run")

    @property
    @pulumi.getter
    def manifests(self) -> Optional[Sequence[str]]:
        """
        Manifests is an optional field that overrides sync source with a local directory for development
        """
        return pulumi.get(self, "manifests")

    @property
    @pulumi.getter
    def prune(self) -> Optional[bool]:
        """
        Prune specifies to delete resources from the cluster that are no longer tracked in git
        """
        return pulumi.get(self, "prune")

    @property
    @pulumi.getter
    def resources(self) -> Optional[Sequence['outputs.ApplicationOperationSyncResources']]:
        """
        Resources describes which resources shall be part of the sync
        """
        return pulumi.get(self, "resources")

    @property
    @pulumi.getter
    def revision(self) -> Optional[str]:
        """
        Revision is the revision (Git) or chart version (Helm) which to sync the application to If omitted, will use the revision specified in app spec.
        """
        return pulumi.get(self, "revision")

    @property
    @pulumi.getter
    def source(self) -> Optional['outputs.ApplicationOperationSyncSource']:
        """
        Source overrides the source definition set in the application. This is typically set in a Rollback operation and is nil during a Sync operation
        """
        return pulumi.get(self, "source")

    @property
    @pulumi.getter(name="syncOptions")
    def sync_options(self) -> Optional[Sequence[str]]:
        """
        SyncOptions provide per-sync sync-options, e.g. Validate=false
        """
        return pulumi.get(self, "sync_options")

    @property
    @pulumi.getter(name="syncStrategy")
    def sync_strategy(self) -> Optional['outputs.ApplicationOperationSyncSyncStrategy']:
        """
        SyncStrategy describes how to perform the sync
        """
        return pulumi.get(self, "sync_strategy")


@pulumi.output_type
class ApplicationOperationSyncResources(dict):
    """
    SyncOperationResource contains resources to sync.
    """
    def __init__(__self__, *,
                 kind: str,
                 name: str,
                 group: Optional[str] = None,
                 namespace: Optional[str] = None):
        """
        SyncOperationResource contains resources to sync.
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        if group is not None:
            pulumi.set(__self__, "group", group)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def kind(self) -> str:
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def group(self) -> Optional[str]:
        return pulumi.get(self, "group")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")


@pulumi.output_type
class ApplicationOperationSyncSource(dict):
    """
    Source overrides the source definition set in the application. This is typically set in a Rollback operation and is nil during a Sync operation
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "repoURL":
            suggest = "repo_url"
        elif key == "targetRevision":
            suggest = "target_revision"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationOperationSyncSource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationOperationSyncSource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationOperationSyncSource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 repo_url: str,
                 chart: Optional[str] = None,
                 directory: Optional['outputs.ApplicationOperationSyncSourceDirectory'] = None,
                 helm: Optional['outputs.ApplicationOperationSyncSourceHelm'] = None,
                 ksonnet: Optional['outputs.ApplicationOperationSyncSourceKsonnet'] = None,
                 kustomize: Optional['outputs.ApplicationOperationSyncSourceKustomize'] = None,
                 path: Optional[str] = None,
                 plugin: Optional['outputs.ApplicationOperationSyncSourcePlugin'] = None,
                 target_revision: Optional[str] = None):
        """
        Source overrides the source definition set in the application. This is typically set in a Rollback operation and is nil during a Sync operation
        :param str repo_url: RepoURL is the URL to the repository (Git or Helm) that contains the application manifests
        :param str chart: Chart is a Helm chart name, and must be specified for applications sourced from a Helm repo.
        :param 'ApplicationOperationSyncSourceDirectoryArgs' directory: Directory holds path/directory specific options
        :param 'ApplicationOperationSyncSourceHelmArgs' helm: Helm holds helm specific options
        :param 'ApplicationOperationSyncSourceKsonnetArgs' ksonnet: Ksonnet holds ksonnet specific options
        :param 'ApplicationOperationSyncSourceKustomizeArgs' kustomize: Kustomize holds kustomize specific options
        :param str path: Path is a directory path within the Git repository, and is only valid for applications sourced from Git.
        :param 'ApplicationOperationSyncSourcePluginArgs' plugin: ConfigManagementPlugin holds config management plugin specific options
        :param str target_revision: TargetRevision defines the revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
        """
        pulumi.set(__self__, "repo_url", repo_url)
        if chart is not None:
            pulumi.set(__self__, "chart", chart)
        if directory is not None:
            pulumi.set(__self__, "directory", directory)
        if helm is not None:
            pulumi.set(__self__, "helm", helm)
        if ksonnet is not None:
            pulumi.set(__self__, "ksonnet", ksonnet)
        if kustomize is not None:
            pulumi.set(__self__, "kustomize", kustomize)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if plugin is not None:
            pulumi.set(__self__, "plugin", plugin)
        if target_revision is not None:
            pulumi.set(__self__, "target_revision", target_revision)

    @property
    @pulumi.getter(name="repoURL")
    def repo_url(self) -> str:
        """
        RepoURL is the URL to the repository (Git or Helm) that contains the application manifests
        """
        return pulumi.get(self, "repo_url")

    @property
    @pulumi.getter
    def chart(self) -> Optional[str]:
        """
        Chart is a Helm chart name, and must be specified for applications sourced from a Helm repo.
        """
        return pulumi.get(self, "chart")

    @property
    @pulumi.getter
    def directory(self) -> Optional['outputs.ApplicationOperationSyncSourceDirectory']:
        """
        Directory holds path/directory specific options
        """
        return pulumi.get(self, "directory")

    @property
    @pulumi.getter
    def helm(self) -> Optional['outputs.ApplicationOperationSyncSourceHelm']:
        """
        Helm holds helm specific options
        """
        return pulumi.get(self, "helm")

    @property
    @pulumi.getter
    def ksonnet(self) -> Optional['outputs.ApplicationOperationSyncSourceKsonnet']:
        """
        Ksonnet holds ksonnet specific options
        """
        return pulumi.get(self, "ksonnet")

    @property
    @pulumi.getter
    def kustomize(self) -> Optional['outputs.ApplicationOperationSyncSourceKustomize']:
        """
        Kustomize holds kustomize specific options
        """
        return pulumi.get(self, "kustomize")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        """
        Path is a directory path within the Git repository, and is only valid for applications sourced from Git.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def plugin(self) -> Optional['outputs.ApplicationOperationSyncSourcePlugin']:
        """
        ConfigManagementPlugin holds config management plugin specific options
        """
        return pulumi.get(self, "plugin")

    @property
    @pulumi.getter(name="targetRevision")
    def target_revision(self) -> Optional[str]:
        """
        TargetRevision defines the revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
        """
        return pulumi.get(self, "target_revision")


@pulumi.output_type
class ApplicationOperationSyncSourceDirectory(dict):
    """
    Directory holds path/directory specific options
    """
    def __init__(__self__, *,
                 exclude: Optional[str] = None,
                 include: Optional[str] = None,
                 jsonnet: Optional['outputs.ApplicationOperationSyncSourceDirectoryJsonnet'] = None,
                 recurse: Optional[bool] = None):
        """
        Directory holds path/directory specific options
        :param str exclude: Exclude contains a glob pattern to match paths against that should be explicitly excluded from being used during manifest generation
        :param str include: Include contains a glob pattern to match paths against that should be explicitly included during manifest generation
        :param 'ApplicationOperationSyncSourceDirectoryJsonnetArgs' jsonnet: Jsonnet holds options specific to Jsonnet
        :param bool recurse: Recurse specifies whether to scan a directory recursively for manifests
        """
        if exclude is not None:
            pulumi.set(__self__, "exclude", exclude)
        if include is not None:
            pulumi.set(__self__, "include", include)
        if jsonnet is not None:
            pulumi.set(__self__, "jsonnet", jsonnet)
        if recurse is not None:
            pulumi.set(__self__, "recurse", recurse)

    @property
    @pulumi.getter
    def exclude(self) -> Optional[str]:
        """
        Exclude contains a glob pattern to match paths against that should be explicitly excluded from being used during manifest generation
        """
        return pulumi.get(self, "exclude")

    @property
    @pulumi.getter
    def include(self) -> Optional[str]:
        """
        Include contains a glob pattern to match paths against that should be explicitly included during manifest generation
        """
        return pulumi.get(self, "include")

    @property
    @pulumi.getter
    def jsonnet(self) -> Optional['outputs.ApplicationOperationSyncSourceDirectoryJsonnet']:
        """
        Jsonnet holds options specific to Jsonnet
        """
        return pulumi.get(self, "jsonnet")

    @property
    @pulumi.getter
    def recurse(self) -> Optional[bool]:
        """
        Recurse specifies whether to scan a directory recursively for manifests
        """
        return pulumi.get(self, "recurse")


@pulumi.output_type
class ApplicationOperationSyncSourceDirectoryJsonnet(dict):
    """
    Jsonnet holds options specific to Jsonnet
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "extVars":
            suggest = "ext_vars"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationOperationSyncSourceDirectoryJsonnet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationOperationSyncSourceDirectoryJsonnet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationOperationSyncSourceDirectoryJsonnet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ext_vars: Optional[Sequence['outputs.ApplicationOperationSyncSourceDirectoryJsonnetExtVars']] = None,
                 libs: Optional[Sequence[str]] = None,
                 tlas: Optional[Sequence['outputs.ApplicationOperationSyncSourceDirectoryJsonnetTlas']] = None):
        """
        Jsonnet holds options specific to Jsonnet
        :param Sequence['ApplicationOperationSyncSourceDirectoryJsonnetExtVarsArgs'] ext_vars: ExtVars is a list of Jsonnet External Variables
        :param Sequence[str] libs: Additional library search dirs
        :param Sequence['ApplicationOperationSyncSourceDirectoryJsonnetTlasArgs'] tlas: TLAS is a list of Jsonnet Top-level Arguments
        """
        if ext_vars is not None:
            pulumi.set(__self__, "ext_vars", ext_vars)
        if libs is not None:
            pulumi.set(__self__, "libs", libs)
        if tlas is not None:
            pulumi.set(__self__, "tlas", tlas)

    @property
    @pulumi.getter(name="extVars")
    def ext_vars(self) -> Optional[Sequence['outputs.ApplicationOperationSyncSourceDirectoryJsonnetExtVars']]:
        """
        ExtVars is a list of Jsonnet External Variables
        """
        return pulumi.get(self, "ext_vars")

    @property
    @pulumi.getter
    def libs(self) -> Optional[Sequence[str]]:
        """
        Additional library search dirs
        """
        return pulumi.get(self, "libs")

    @property
    @pulumi.getter
    def tlas(self) -> Optional[Sequence['outputs.ApplicationOperationSyncSourceDirectoryJsonnetTlas']]:
        """
        TLAS is a list of Jsonnet Top-level Arguments
        """
        return pulumi.get(self, "tlas")


@pulumi.output_type
class ApplicationOperationSyncSourceDirectoryJsonnetExtVars(dict):
    """
    JsonnetVar represents a variable to be passed to jsonnet during manifest generation
    """
    def __init__(__self__, *,
                 name: str,
                 value: str,
                 code: Optional[bool] = None):
        """
        JsonnetVar represents a variable to be passed to jsonnet during manifest generation
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)
        if code is not None:
            pulumi.set(__self__, "code", code)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def code(self) -> Optional[bool]:
        return pulumi.get(self, "code")


@pulumi.output_type
class ApplicationOperationSyncSourceDirectoryJsonnetTlas(dict):
    """
    JsonnetVar represents a variable to be passed to jsonnet during manifest generation
    """
    def __init__(__self__, *,
                 name: str,
                 value: str,
                 code: Optional[bool] = None):
        """
        JsonnetVar represents a variable to be passed to jsonnet during manifest generation
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)
        if code is not None:
            pulumi.set(__self__, "code", code)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def code(self) -> Optional[bool]:
        return pulumi.get(self, "code")


@pulumi.output_type
class ApplicationOperationSyncSourceHelm(dict):
    """
    Helm holds helm specific options
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fileParameters":
            suggest = "file_parameters"
        elif key == "passCredentials":
            suggest = "pass_credentials"
        elif key == "releaseName":
            suggest = "release_name"
        elif key == "valueFiles":
            suggest = "value_files"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationOperationSyncSourceHelm. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationOperationSyncSourceHelm.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationOperationSyncSourceHelm.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 file_parameters: Optional[Sequence['outputs.ApplicationOperationSyncSourceHelmFileParameters']] = None,
                 parameters: Optional[Sequence['outputs.ApplicationOperationSyncSourceHelmParameters']] = None,
                 pass_credentials: Optional[bool] = None,
                 release_name: Optional[str] = None,
                 value_files: Optional[Sequence[str]] = None,
                 values: Optional[str] = None,
                 version: Optional[str] = None):
        """
        Helm holds helm specific options
        :param Sequence['ApplicationOperationSyncSourceHelmFileParametersArgs'] file_parameters: FileParameters are file parameters to the helm template
        :param Sequence['ApplicationOperationSyncSourceHelmParametersArgs'] parameters: Parameters is a list of Helm parameters which are passed to the helm template command upon manifest generation
        :param bool pass_credentials: PassCredentials pass credentials to all domains (Helm's --pass-credentials)
        :param str release_name: ReleaseName is the Helm release name to use. If omitted it will use the application name
        :param Sequence[str] value_files: ValuesFiles is a list of Helm value files to use when generating a template
        :param str values: Values specifies Helm values to be passed to helm template, typically defined as a block
        :param str version: Version is the Helm version to use for templating (either "2" or "3")
        """
        if file_parameters is not None:
            pulumi.set(__self__, "file_parameters", file_parameters)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if pass_credentials is not None:
            pulumi.set(__self__, "pass_credentials", pass_credentials)
        if release_name is not None:
            pulumi.set(__self__, "release_name", release_name)
        if value_files is not None:
            pulumi.set(__self__, "value_files", value_files)
        if values is not None:
            pulumi.set(__self__, "values", values)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="fileParameters")
    def file_parameters(self) -> Optional[Sequence['outputs.ApplicationOperationSyncSourceHelmFileParameters']]:
        """
        FileParameters are file parameters to the helm template
        """
        return pulumi.get(self, "file_parameters")

    @property
    @pulumi.getter
    def parameters(self) -> Optional[Sequence['outputs.ApplicationOperationSyncSourceHelmParameters']]:
        """
        Parameters is a list of Helm parameters which are passed to the helm template command upon manifest generation
        """
        return pulumi.get(self, "parameters")

    @property
    @pulumi.getter(name="passCredentials")
    def pass_credentials(self) -> Optional[bool]:
        """
        PassCredentials pass credentials to all domains (Helm's --pass-credentials)
        """
        return pulumi.get(self, "pass_credentials")

    @property
    @pulumi.getter(name="releaseName")
    def release_name(self) -> Optional[str]:
        """
        ReleaseName is the Helm release name to use. If omitted it will use the application name
        """
        return pulumi.get(self, "release_name")

    @property
    @pulumi.getter(name="valueFiles")
    def value_files(self) -> Optional[Sequence[str]]:
        """
        ValuesFiles is a list of Helm value files to use when generating a template
        """
        return pulumi.get(self, "value_files")

    @property
    @pulumi.getter
    def values(self) -> Optional[str]:
        """
        Values specifies Helm values to be passed to helm template, typically defined as a block
        """
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        """
        Version is the Helm version to use for templating (either "2" or "3")
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class ApplicationOperationSyncSourceHelmFileParameters(dict):
    """
    HelmFileParameter is a file parameter that's passed to helm template during manifest generation
    """
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 path: Optional[str] = None):
        """
        HelmFileParameter is a file parameter that's passed to helm template during manifest generation
        :param str name: Name is the name of the Helm parameter
        :param str path: Path is the path to the file containing the values for the Helm parameter
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if path is not None:
            pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name is the name of the Helm parameter
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        """
        Path is the path to the file containing the values for the Helm parameter
        """
        return pulumi.get(self, "path")


@pulumi.output_type
class ApplicationOperationSyncSourceHelmParameters(dict):
    """
    HelmParameter is a parameter that's passed to helm template during manifest generation
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "forceString":
            suggest = "force_string"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationOperationSyncSourceHelmParameters. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationOperationSyncSourceHelmParameters.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationOperationSyncSourceHelmParameters.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 force_string: Optional[bool] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        HelmParameter is a parameter that's passed to helm template during manifest generation
        :param bool force_string: ForceString determines whether to tell Helm to interpret booleans and numbers as strings
        :param str name: Name is the name of the Helm parameter
        :param str value: Value is the value for the Helm parameter
        """
        if force_string is not None:
            pulumi.set(__self__, "force_string", force_string)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="forceString")
    def force_string(self) -> Optional[bool]:
        """
        ForceString determines whether to tell Helm to interpret booleans and numbers as strings
        """
        return pulumi.get(self, "force_string")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name is the name of the Helm parameter
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value is the value for the Helm parameter
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationOperationSyncSourceKsonnet(dict):
    """
    Ksonnet holds ksonnet specific options
    """
    def __init__(__self__, *,
                 environment: Optional[str] = None,
                 parameters: Optional[Sequence['outputs.ApplicationOperationSyncSourceKsonnetParameters']] = None):
        """
        Ksonnet holds ksonnet specific options
        :param str environment: Environment is a ksonnet application environment name
        :param Sequence['ApplicationOperationSyncSourceKsonnetParametersArgs'] parameters: Parameters are a list of ksonnet component parameter override values
        """
        if environment is not None:
            pulumi.set(__self__, "environment", environment)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)

    @property
    @pulumi.getter
    def environment(self) -> Optional[str]:
        """
        Environment is a ksonnet application environment name
        """
        return pulumi.get(self, "environment")

    @property
    @pulumi.getter
    def parameters(self) -> Optional[Sequence['outputs.ApplicationOperationSyncSourceKsonnetParameters']]:
        """
        Parameters are a list of ksonnet component parameter override values
        """
        return pulumi.get(self, "parameters")


@pulumi.output_type
class ApplicationOperationSyncSourceKsonnetParameters(dict):
    """
    KsonnetParameter is a ksonnet component parameter
    """
    def __init__(__self__, *,
                 name: str,
                 value: str,
                 component: Optional[str] = None):
        """
        KsonnetParameter is a ksonnet component parameter
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)
        if component is not None:
            pulumi.set(__self__, "component", component)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def component(self) -> Optional[str]:
        return pulumi.get(self, "component")


@pulumi.output_type
class ApplicationOperationSyncSourceKustomize(dict):
    """
    Kustomize holds kustomize specific options
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "commonAnnotations":
            suggest = "common_annotations"
        elif key == "commonLabels":
            suggest = "common_labels"
        elif key == "forceCommonAnnotations":
            suggest = "force_common_annotations"
        elif key == "forceCommonLabels":
            suggest = "force_common_labels"
        elif key == "namePrefix":
            suggest = "name_prefix"
        elif key == "nameSuffix":
            suggest = "name_suffix"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationOperationSyncSourceKustomize. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationOperationSyncSourceKustomize.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationOperationSyncSourceKustomize.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 common_annotations: Optional[Mapping[str, str]] = None,
                 common_labels: Optional[Mapping[str, str]] = None,
                 force_common_annotations: Optional[bool] = None,
                 force_common_labels: Optional[bool] = None,
                 images: Optional[Sequence[str]] = None,
                 name_prefix: Optional[str] = None,
                 name_suffix: Optional[str] = None,
                 version: Optional[str] = None):
        """
        Kustomize holds kustomize specific options
        :param Mapping[str, str] common_annotations: CommonAnnotations is a list of additional annotations to add to rendered manifests
        :param Mapping[str, str] common_labels: CommonLabels is a list of additional labels to add to rendered manifests
        :param bool force_common_annotations: ForceCommonAnnotations specifies whether to force applying common annotations to resources for Kustomize apps
        :param bool force_common_labels: ForceCommonLabels specifies whether to force applying common labels to resources for Kustomize apps
        :param Sequence[str] images: Images is a list of Kustomize image override specifications
        :param str name_prefix: NamePrefix is a prefix appended to resources for Kustomize apps
        :param str name_suffix: NameSuffix is a suffix appended to resources for Kustomize apps
        :param str version: Version controls which version of Kustomize to use for rendering manifests
        """
        if common_annotations is not None:
            pulumi.set(__self__, "common_annotations", common_annotations)
        if common_labels is not None:
            pulumi.set(__self__, "common_labels", common_labels)
        if force_common_annotations is not None:
            pulumi.set(__self__, "force_common_annotations", force_common_annotations)
        if force_common_labels is not None:
            pulumi.set(__self__, "force_common_labels", force_common_labels)
        if images is not None:
            pulumi.set(__self__, "images", images)
        if name_prefix is not None:
            pulumi.set(__self__, "name_prefix", name_prefix)
        if name_suffix is not None:
            pulumi.set(__self__, "name_suffix", name_suffix)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="commonAnnotations")
    def common_annotations(self) -> Optional[Mapping[str, str]]:
        """
        CommonAnnotations is a list of additional annotations to add to rendered manifests
        """
        return pulumi.get(self, "common_annotations")

    @property
    @pulumi.getter(name="commonLabels")
    def common_labels(self) -> Optional[Mapping[str, str]]:
        """
        CommonLabels is a list of additional labels to add to rendered manifests
        """
        return pulumi.get(self, "common_labels")

    @property
    @pulumi.getter(name="forceCommonAnnotations")
    def force_common_annotations(self) -> Optional[bool]:
        """
        ForceCommonAnnotations specifies whether to force applying common annotations to resources for Kustomize apps
        """
        return pulumi.get(self, "force_common_annotations")

    @property
    @pulumi.getter(name="forceCommonLabels")
    def force_common_labels(self) -> Optional[bool]:
        """
        ForceCommonLabels specifies whether to force applying common labels to resources for Kustomize apps
        """
        return pulumi.get(self, "force_common_labels")

    @property
    @pulumi.getter
    def images(self) -> Optional[Sequence[str]]:
        """
        Images is a list of Kustomize image override specifications
        """
        return pulumi.get(self, "images")

    @property
    @pulumi.getter(name="namePrefix")
    def name_prefix(self) -> Optional[str]:
        """
        NamePrefix is a prefix appended to resources for Kustomize apps
        """
        return pulumi.get(self, "name_prefix")

    @property
    @pulumi.getter(name="nameSuffix")
    def name_suffix(self) -> Optional[str]:
        """
        NameSuffix is a suffix appended to resources for Kustomize apps
        """
        return pulumi.get(self, "name_suffix")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        """
        Version controls which version of Kustomize to use for rendering manifests
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class ApplicationOperationSyncSourcePlugin(dict):
    """
    ConfigManagementPlugin holds config management plugin specific options
    """
    def __init__(__self__, *,
                 env: Optional[Sequence['outputs.ApplicationOperationSyncSourcePluginEnv']] = None,
                 name: Optional[str] = None):
        """
        ConfigManagementPlugin holds config management plugin specific options
        :param Sequence['ApplicationOperationSyncSourcePluginEnvArgs'] env: Env is a list of environment variable entries
        """
        if env is not None:
            pulumi.set(__self__, "env", env)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def env(self) -> Optional[Sequence['outputs.ApplicationOperationSyncSourcePluginEnv']]:
        """
        Env is a list of environment variable entries
        """
        return pulumi.get(self, "env")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class ApplicationOperationSyncSourcePluginEnv(dict):
    """
    EnvEntry represents an entry in the application's environment
    """
    def __init__(__self__, *,
                 name: str,
                 value: str):
        """
        EnvEntry represents an entry in the application's environment
        :param str name: Name is the name of the variable, usually expressed in uppercase
        :param str value: Value is the value of the variable
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name is the name of the variable, usually expressed in uppercase
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value is the value of the variable
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationOperationSyncSyncStrategy(dict):
    """
    SyncStrategy describes how to perform the sync
    """
    def __init__(__self__, *,
                 apply: Optional['outputs.ApplicationOperationSyncSyncStrategyApply'] = None,
                 hook: Optional['outputs.ApplicationOperationSyncSyncStrategyHook'] = None):
        """
        SyncStrategy describes how to perform the sync
        :param 'ApplicationOperationSyncSyncStrategyApplyArgs' apply: Apply will perform a `kubectl apply` to perform the sync.
        :param 'ApplicationOperationSyncSyncStrategyHookArgs' hook: Hook will submit any referenced resources to perform the sync. This is the default strategy
        """
        if apply is not None:
            pulumi.set(__self__, "apply", apply)
        if hook is not None:
            pulumi.set(__self__, "hook", hook)

    @property
    @pulumi.getter
    def apply(self) -> Optional['outputs.ApplicationOperationSyncSyncStrategyApply']:
        """
        Apply will perform a `kubectl apply` to perform the sync.
        """
        return pulumi.get(self, "apply")

    @property
    @pulumi.getter
    def hook(self) -> Optional['outputs.ApplicationOperationSyncSyncStrategyHook']:
        """
        Hook will submit any referenced resources to perform the sync. This is the default strategy
        """
        return pulumi.get(self, "hook")


@pulumi.output_type
class ApplicationOperationSyncSyncStrategyApply(dict):
    """
    Apply will perform a `kubectl apply` to perform the sync.
    """
    def __init__(__self__, *,
                 force: Optional[bool] = None):
        """
        Apply will perform a `kubectl apply` to perform the sync.
        :param bool force: Force indicates whether or not to supply the --force flag to `kubectl apply`. The --force flag deletes and re-create the resource, when PATCH encounters conflict and has retried for 5 times.
        """
        if force is not None:
            pulumi.set(__self__, "force", force)

    @property
    @pulumi.getter
    def force(self) -> Optional[bool]:
        """
        Force indicates whether or not to supply the --force flag to `kubectl apply`. The --force flag deletes and re-create the resource, when PATCH encounters conflict and has retried for 5 times.
        """
        return pulumi.get(self, "force")


@pulumi.output_type
class ApplicationOperationSyncSyncStrategyHook(dict):
    """
    Hook will submit any referenced resources to perform the sync. This is the default strategy
    """
    def __init__(__self__, *,
                 force: Optional[bool] = None):
        """
        Hook will submit any referenced resources to perform the sync. This is the default strategy
        :param bool force: Force indicates whether or not to supply the --force flag to `kubectl apply`. The --force flag deletes and re-create the resource, when PATCH encounters conflict and has retried for 5 times.
        """
        if force is not None:
            pulumi.set(__self__, "force", force)

    @property
    @pulumi.getter
    def force(self) -> Optional[bool]:
        """
        Force indicates whether or not to supply the --force flag to `kubectl apply`. The --force flag deletes and re-create the resource, when PATCH encounters conflict and has retried for 5 times.
        """
        return pulumi.get(self, "force")


@pulumi.output_type
class ApplicationSpec(dict):
    """
    ApplicationSpec represents desired application state. Contains link to repository with application definition and additional parameters link definition revision.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ignoreDifferences":
            suggest = "ignore_differences"
        elif key == "revisionHistoryLimit":
            suggest = "revision_history_limit"
        elif key == "syncPolicy":
            suggest = "sync_policy"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSpec. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSpec.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSpec.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination: 'outputs.ApplicationSpecDestination',
                 project: str,
                 source: 'outputs.ApplicationSpecSource',
                 ignore_differences: Optional[Sequence['outputs.ApplicationSpecIgnoreDifferences']] = None,
                 info: Optional[Sequence['outputs.ApplicationSpecInfo']] = None,
                 revision_history_limit: Optional[int] = None,
                 sync_policy: Optional['outputs.ApplicationSpecSyncPolicy'] = None):
        """
        ApplicationSpec represents desired application state. Contains link to repository with application definition and additional parameters link definition revision.
        :param 'ApplicationSpecDestinationArgs' destination: Destination is a reference to the target Kubernetes server and namespace
        :param str project: Project is a reference to the project this application belongs to. The empty string means that application belongs to the 'default' project.
        :param 'ApplicationSpecSourceArgs' source: Source is a reference to the location of the application's manifests or chart
        :param Sequence['ApplicationSpecIgnoreDifferencesArgs'] ignore_differences: IgnoreDifferences is a list of resources and their fields which should be ignored during comparison
        :param Sequence['ApplicationSpecInfoArgs'] info: Info contains a list of information (URLs, email addresses, and plain text) that relates to the application
        :param int revision_history_limit: RevisionHistoryLimit limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.
        :param 'ApplicationSpecSyncPolicyArgs' sync_policy: SyncPolicy controls when and how a sync will be performed
        """
        pulumi.set(__self__, "destination", destination)
        pulumi.set(__self__, "project", project)
        pulumi.set(__self__, "source", source)
        if ignore_differences is not None:
            pulumi.set(__self__, "ignore_differences", ignore_differences)
        if info is not None:
            pulumi.set(__self__, "info", info)
        if revision_history_limit is not None:
            pulumi.set(__self__, "revision_history_limit", revision_history_limit)
        if sync_policy is not None:
            pulumi.set(__self__, "sync_policy", sync_policy)

    @property
    @pulumi.getter
    def destination(self) -> 'outputs.ApplicationSpecDestination':
        """
        Destination is a reference to the target Kubernetes server and namespace
        """
        return pulumi.get(self, "destination")

    @property
    @pulumi.getter
    def project(self) -> str:
        """
        Project is a reference to the project this application belongs to. The empty string means that application belongs to the 'default' project.
        """
        return pulumi.get(self, "project")

    @property
    @pulumi.getter
    def source(self) -> 'outputs.ApplicationSpecSource':
        """
        Source is a reference to the location of the application's manifests or chart
        """
        return pulumi.get(self, "source")

    @property
    @pulumi.getter(name="ignoreDifferences")
    def ignore_differences(self) -> Optional[Sequence['outputs.ApplicationSpecIgnoreDifferences']]:
        """
        IgnoreDifferences is a list of resources and their fields which should be ignored during comparison
        """
        return pulumi.get(self, "ignore_differences")

    @property
    @pulumi.getter
    def info(self) -> Optional[Sequence['outputs.ApplicationSpecInfo']]:
        """
        Info contains a list of information (URLs, email addresses, and plain text) that relates to the application
        """
        return pulumi.get(self, "info")

    @property
    @pulumi.getter(name="revisionHistoryLimit")
    def revision_history_limit(self) -> Optional[int]:
        """
        RevisionHistoryLimit limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.
        """
        return pulumi.get(self, "revision_history_limit")

    @property
    @pulumi.getter(name="syncPolicy")
    def sync_policy(self) -> Optional['outputs.ApplicationSpecSyncPolicy']:
        """
        SyncPolicy controls when and how a sync will be performed
        """
        return pulumi.get(self, "sync_policy")


@pulumi.output_type
class ApplicationSpecDestination(dict):
    """
    Destination is a reference to the target Kubernetes server and namespace
    """
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None,
                 server: Optional[str] = None):
        """
        Destination is a reference to the target Kubernetes server and namespace
        :param str name: Name is an alternate way of specifying the target cluster by its symbolic name
        :param str namespace: Namespace specifies the target namespace for the application's resources. The namespace will only be set for namespace-scoped resources that have not set a value for .metadata.namespace
        :param str server: Server specifies the URL of the target cluster and must be set to the Kubernetes control plane API
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if server is not None:
            pulumi.set(__self__, "server", server)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name is an alternate way of specifying the target cluster by its symbolic name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace specifies the target namespace for the application's resources. The namespace will only be set for namespace-scoped resources that have not set a value for .metadata.namespace
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def server(self) -> Optional[str]:
        """
        Server specifies the URL of the target cluster and must be set to the Kubernetes control plane API
        """
        return pulumi.get(self, "server")


@pulumi.output_type
class ApplicationSpecIgnoreDifferences(dict):
    """
    ResourceIgnoreDifferences contains resource filter and list of json paths which should be ignored during comparison with live state.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "jqPathExpressions":
            suggest = "jq_path_expressions"
        elif key == "jsonPointers":
            suggest = "json_pointers"
        elif key == "managedFieldsManagers":
            suggest = "managed_fields_managers"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSpecIgnoreDifferences. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSpecIgnoreDifferences.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSpecIgnoreDifferences.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 kind: str,
                 group: Optional[str] = None,
                 jq_path_expressions: Optional[Sequence[str]] = None,
                 json_pointers: Optional[Sequence[str]] = None,
                 managed_fields_managers: Optional[Sequence[str]] = None,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None):
        """
        ResourceIgnoreDifferences contains resource filter and list of json paths which should be ignored during comparison with live state.
        :param Sequence[str] managed_fields_managers: ManagedFieldsManagers is a list of trusted managers. Fields mutated by those managers will take precedence over the desired state defined in the SCM and won't be displayed in diffs
        """
        pulumi.set(__self__, "kind", kind)
        if group is not None:
            pulumi.set(__self__, "group", group)
        if jq_path_expressions is not None:
            pulumi.set(__self__, "jq_path_expressions", jq_path_expressions)
        if json_pointers is not None:
            pulumi.set(__self__, "json_pointers", json_pointers)
        if managed_fields_managers is not None:
            pulumi.set(__self__, "managed_fields_managers", managed_fields_managers)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def kind(self) -> str:
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def group(self) -> Optional[str]:
        return pulumi.get(self, "group")

    @property
    @pulumi.getter(name="jqPathExpressions")
    def jq_path_expressions(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "jq_path_expressions")

    @property
    @pulumi.getter(name="jsonPointers")
    def json_pointers(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "json_pointers")

    @property
    @pulumi.getter(name="managedFieldsManagers")
    def managed_fields_managers(self) -> Optional[Sequence[str]]:
        """
        ManagedFieldsManagers is a list of trusted managers. Fields mutated by those managers will take precedence over the desired state defined in the SCM and won't be displayed in diffs
        """
        return pulumi.get(self, "managed_fields_managers")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")


@pulumi.output_type
class ApplicationSpecInfo(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSpecSource(dict):
    """
    Source is a reference to the location of the application's manifests or chart
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "repoURL":
            suggest = "repo_url"
        elif key == "targetRevision":
            suggest = "target_revision"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSpecSource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSpecSource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSpecSource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 repo_url: str,
                 chart: Optional[str] = None,
                 directory: Optional['outputs.ApplicationSpecSourceDirectory'] = None,
                 helm: Optional['outputs.ApplicationSpecSourceHelm'] = None,
                 ksonnet: Optional['outputs.ApplicationSpecSourceKsonnet'] = None,
                 kustomize: Optional['outputs.ApplicationSpecSourceKustomize'] = None,
                 path: Optional[str] = None,
                 plugin: Optional['outputs.ApplicationSpecSourcePlugin'] = None,
                 target_revision: Optional[str] = None):
        """
        Source is a reference to the location of the application's manifests or chart
        :param str repo_url: RepoURL is the URL to the repository (Git or Helm) that contains the application manifests
        :param str chart: Chart is a Helm chart name, and must be specified for applications sourced from a Helm repo.
        :param 'ApplicationSpecSourceDirectoryArgs' directory: Directory holds path/directory specific options
        :param 'ApplicationSpecSourceHelmArgs' helm: Helm holds helm specific options
        :param 'ApplicationSpecSourceKsonnetArgs' ksonnet: Ksonnet holds ksonnet specific options
        :param 'ApplicationSpecSourceKustomizeArgs' kustomize: Kustomize holds kustomize specific options
        :param str path: Path is a directory path within the Git repository, and is only valid for applications sourced from Git.
        :param 'ApplicationSpecSourcePluginArgs' plugin: ConfigManagementPlugin holds config management plugin specific options
        :param str target_revision: TargetRevision defines the revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
        """
        pulumi.set(__self__, "repo_url", repo_url)
        if chart is not None:
            pulumi.set(__self__, "chart", chart)
        if directory is not None:
            pulumi.set(__self__, "directory", directory)
        if helm is not None:
            pulumi.set(__self__, "helm", helm)
        if ksonnet is not None:
            pulumi.set(__self__, "ksonnet", ksonnet)
        if kustomize is not None:
            pulumi.set(__self__, "kustomize", kustomize)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if plugin is not None:
            pulumi.set(__self__, "plugin", plugin)
        if target_revision is not None:
            pulumi.set(__self__, "target_revision", target_revision)

    @property
    @pulumi.getter(name="repoURL")
    def repo_url(self) -> str:
        """
        RepoURL is the URL to the repository (Git or Helm) that contains the application manifests
        """
        return pulumi.get(self, "repo_url")

    @property
    @pulumi.getter
    def chart(self) -> Optional[str]:
        """
        Chart is a Helm chart name, and must be specified for applications sourced from a Helm repo.
        """
        return pulumi.get(self, "chart")

    @property
    @pulumi.getter
    def directory(self) -> Optional['outputs.ApplicationSpecSourceDirectory']:
        """
        Directory holds path/directory specific options
        """
        return pulumi.get(self, "directory")

    @property
    @pulumi.getter
    def helm(self) -> Optional['outputs.ApplicationSpecSourceHelm']:
        """
        Helm holds helm specific options
        """
        return pulumi.get(self, "helm")

    @property
    @pulumi.getter
    def ksonnet(self) -> Optional['outputs.ApplicationSpecSourceKsonnet']:
        """
        Ksonnet holds ksonnet specific options
        """
        return pulumi.get(self, "ksonnet")

    @property
    @pulumi.getter
    def kustomize(self) -> Optional['outputs.ApplicationSpecSourceKustomize']:
        """
        Kustomize holds kustomize specific options
        """
        return pulumi.get(self, "kustomize")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        """
        Path is a directory path within the Git repository, and is only valid for applications sourced from Git.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def plugin(self) -> Optional['outputs.ApplicationSpecSourcePlugin']:
        """
        ConfigManagementPlugin holds config management plugin specific options
        """
        return pulumi.get(self, "plugin")

    @property
    @pulumi.getter(name="targetRevision")
    def target_revision(self) -> Optional[str]:
        """
        TargetRevision defines the revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
        """
        return pulumi.get(self, "target_revision")


@pulumi.output_type
class ApplicationSpecSourceDirectory(dict):
    """
    Directory holds path/directory specific options
    """
    def __init__(__self__, *,
                 exclude: Optional[str] = None,
                 include: Optional[str] = None,
                 jsonnet: Optional['outputs.ApplicationSpecSourceDirectoryJsonnet'] = None,
                 recurse: Optional[bool] = None):
        """
        Directory holds path/directory specific options
        :param str exclude: Exclude contains a glob pattern to match paths against that should be explicitly excluded from being used during manifest generation
        :param str include: Include contains a glob pattern to match paths against that should be explicitly included during manifest generation
        :param 'ApplicationSpecSourceDirectoryJsonnetArgs' jsonnet: Jsonnet holds options specific to Jsonnet
        :param bool recurse: Recurse specifies whether to scan a directory recursively for manifests
        """
        if exclude is not None:
            pulumi.set(__self__, "exclude", exclude)
        if include is not None:
            pulumi.set(__self__, "include", include)
        if jsonnet is not None:
            pulumi.set(__self__, "jsonnet", jsonnet)
        if recurse is not None:
            pulumi.set(__self__, "recurse", recurse)

    @property
    @pulumi.getter
    def exclude(self) -> Optional[str]:
        """
        Exclude contains a glob pattern to match paths against that should be explicitly excluded from being used during manifest generation
        """
        return pulumi.get(self, "exclude")

    @property
    @pulumi.getter
    def include(self) -> Optional[str]:
        """
        Include contains a glob pattern to match paths against that should be explicitly included during manifest generation
        """
        return pulumi.get(self, "include")

    @property
    @pulumi.getter
    def jsonnet(self) -> Optional['outputs.ApplicationSpecSourceDirectoryJsonnet']:
        """
        Jsonnet holds options specific to Jsonnet
        """
        return pulumi.get(self, "jsonnet")

    @property
    @pulumi.getter
    def recurse(self) -> Optional[bool]:
        """
        Recurse specifies whether to scan a directory recursively for manifests
        """
        return pulumi.get(self, "recurse")


@pulumi.output_type
class ApplicationSpecSourceDirectoryJsonnet(dict):
    """
    Jsonnet holds options specific to Jsonnet
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "extVars":
            suggest = "ext_vars"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSpecSourceDirectoryJsonnet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSpecSourceDirectoryJsonnet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSpecSourceDirectoryJsonnet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ext_vars: Optional[Sequence['outputs.ApplicationSpecSourceDirectoryJsonnetExtVars']] = None,
                 libs: Optional[Sequence[str]] = None,
                 tlas: Optional[Sequence['outputs.ApplicationSpecSourceDirectoryJsonnetTlas']] = None):
        """
        Jsonnet holds options specific to Jsonnet
        :param Sequence['ApplicationSpecSourceDirectoryJsonnetExtVarsArgs'] ext_vars: ExtVars is a list of Jsonnet External Variables
        :param Sequence[str] libs: Additional library search dirs
        :param Sequence['ApplicationSpecSourceDirectoryJsonnetTlasArgs'] tlas: TLAS is a list of Jsonnet Top-level Arguments
        """
        if ext_vars is not None:
            pulumi.set(__self__, "ext_vars", ext_vars)
        if libs is not None:
            pulumi.set(__self__, "libs", libs)
        if tlas is not None:
            pulumi.set(__self__, "tlas", tlas)

    @property
    @pulumi.getter(name="extVars")
    def ext_vars(self) -> Optional[Sequence['outputs.ApplicationSpecSourceDirectoryJsonnetExtVars']]:
        """
        ExtVars is a list of Jsonnet External Variables
        """
        return pulumi.get(self, "ext_vars")

    @property
    @pulumi.getter
    def libs(self) -> Optional[Sequence[str]]:
        """
        Additional library search dirs
        """
        return pulumi.get(self, "libs")

    @property
    @pulumi.getter
    def tlas(self) -> Optional[Sequence['outputs.ApplicationSpecSourceDirectoryJsonnetTlas']]:
        """
        TLAS is a list of Jsonnet Top-level Arguments
        """
        return pulumi.get(self, "tlas")


@pulumi.output_type
class ApplicationSpecSourceDirectoryJsonnetExtVars(dict):
    """
    JsonnetVar represents a variable to be passed to jsonnet during manifest generation
    """
    def __init__(__self__, *,
                 name: str,
                 value: str,
                 code: Optional[bool] = None):
        """
        JsonnetVar represents a variable to be passed to jsonnet during manifest generation
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)
        if code is not None:
            pulumi.set(__self__, "code", code)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def code(self) -> Optional[bool]:
        return pulumi.get(self, "code")


@pulumi.output_type
class ApplicationSpecSourceDirectoryJsonnetTlas(dict):
    """
    JsonnetVar represents a variable to be passed to jsonnet during manifest generation
    """
    def __init__(__self__, *,
                 name: str,
                 value: str,
                 code: Optional[bool] = None):
        """
        JsonnetVar represents a variable to be passed to jsonnet during manifest generation
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)
        if code is not None:
            pulumi.set(__self__, "code", code)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def code(self) -> Optional[bool]:
        return pulumi.get(self, "code")


@pulumi.output_type
class ApplicationSpecSourceHelm(dict):
    """
    Helm holds helm specific options
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fileParameters":
            suggest = "file_parameters"
        elif key == "passCredentials":
            suggest = "pass_credentials"
        elif key == "releaseName":
            suggest = "release_name"
        elif key == "valueFiles":
            suggest = "value_files"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSpecSourceHelm. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSpecSourceHelm.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSpecSourceHelm.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 file_parameters: Optional[Sequence['outputs.ApplicationSpecSourceHelmFileParameters']] = None,
                 parameters: Optional[Sequence['outputs.ApplicationSpecSourceHelmParameters']] = None,
                 pass_credentials: Optional[bool] = None,
                 release_name: Optional[str] = None,
                 value_files: Optional[Sequence[str]] = None,
                 values: Optional[str] = None,
                 version: Optional[str] = None):
        """
        Helm holds helm specific options
        :param Sequence['ApplicationSpecSourceHelmFileParametersArgs'] file_parameters: FileParameters are file parameters to the helm template
        :param Sequence['ApplicationSpecSourceHelmParametersArgs'] parameters: Parameters is a list of Helm parameters which are passed to the helm template command upon manifest generation
        :param bool pass_credentials: PassCredentials pass credentials to all domains (Helm's --pass-credentials)
        :param str release_name: ReleaseName is the Helm release name to use. If omitted it will use the application name
        :param Sequence[str] value_files: ValuesFiles is a list of Helm value files to use when generating a template
        :param str values: Values specifies Helm values to be passed to helm template, typically defined as a block
        :param str version: Version is the Helm version to use for templating (either "2" or "3")
        """
        if file_parameters is not None:
            pulumi.set(__self__, "file_parameters", file_parameters)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if pass_credentials is not None:
            pulumi.set(__self__, "pass_credentials", pass_credentials)
        if release_name is not None:
            pulumi.set(__self__, "release_name", release_name)
        if value_files is not None:
            pulumi.set(__self__, "value_files", value_files)
        if values is not None:
            pulumi.set(__self__, "values", values)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="fileParameters")
    def file_parameters(self) -> Optional[Sequence['outputs.ApplicationSpecSourceHelmFileParameters']]:
        """
        FileParameters are file parameters to the helm template
        """
        return pulumi.get(self, "file_parameters")

    @property
    @pulumi.getter
    def parameters(self) -> Optional[Sequence['outputs.ApplicationSpecSourceHelmParameters']]:
        """
        Parameters is a list of Helm parameters which are passed to the helm template command upon manifest generation
        """
        return pulumi.get(self, "parameters")

    @property
    @pulumi.getter(name="passCredentials")
    def pass_credentials(self) -> Optional[bool]:
        """
        PassCredentials pass credentials to all domains (Helm's --pass-credentials)
        """
        return pulumi.get(self, "pass_credentials")

    @property
    @pulumi.getter(name="releaseName")
    def release_name(self) -> Optional[str]:
        """
        ReleaseName is the Helm release name to use. If omitted it will use the application name
        """
        return pulumi.get(self, "release_name")

    @property
    @pulumi.getter(name="valueFiles")
    def value_files(self) -> Optional[Sequence[str]]:
        """
        ValuesFiles is a list of Helm value files to use when generating a template
        """
        return pulumi.get(self, "value_files")

    @property
    @pulumi.getter
    def values(self) -> Optional[str]:
        """
        Values specifies Helm values to be passed to helm template, typically defined as a block
        """
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        """
        Version is the Helm version to use for templating (either "2" or "3")
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class ApplicationSpecSourceHelmFileParameters(dict):
    """
    HelmFileParameter is a file parameter that's passed to helm template during manifest generation
    """
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 path: Optional[str] = None):
        """
        HelmFileParameter is a file parameter that's passed to helm template during manifest generation
        :param str name: Name is the name of the Helm parameter
        :param str path: Path is the path to the file containing the values for the Helm parameter
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if path is not None:
            pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name is the name of the Helm parameter
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        """
        Path is the path to the file containing the values for the Helm parameter
        """
        return pulumi.get(self, "path")


@pulumi.output_type
class ApplicationSpecSourceHelmParameters(dict):
    """
    HelmParameter is a parameter that's passed to helm template during manifest generation
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "forceString":
            suggest = "force_string"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSpecSourceHelmParameters. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSpecSourceHelmParameters.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSpecSourceHelmParameters.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 force_string: Optional[bool] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        HelmParameter is a parameter that's passed to helm template during manifest generation
        :param bool force_string: ForceString determines whether to tell Helm to interpret booleans and numbers as strings
        :param str name: Name is the name of the Helm parameter
        :param str value: Value is the value for the Helm parameter
        """
        if force_string is not None:
            pulumi.set(__self__, "force_string", force_string)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="forceString")
    def force_string(self) -> Optional[bool]:
        """
        ForceString determines whether to tell Helm to interpret booleans and numbers as strings
        """
        return pulumi.get(self, "force_string")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name is the name of the Helm parameter
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value is the value for the Helm parameter
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSpecSourceKsonnet(dict):
    """
    Ksonnet holds ksonnet specific options
    """
    def __init__(__self__, *,
                 environment: Optional[str] = None,
                 parameters: Optional[Sequence['outputs.ApplicationSpecSourceKsonnetParameters']] = None):
        """
        Ksonnet holds ksonnet specific options
        :param str environment: Environment is a ksonnet application environment name
        :param Sequence['ApplicationSpecSourceKsonnetParametersArgs'] parameters: Parameters are a list of ksonnet component parameter override values
        """
        if environment is not None:
            pulumi.set(__self__, "environment", environment)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)

    @property
    @pulumi.getter
    def environment(self) -> Optional[str]:
        """
        Environment is a ksonnet application environment name
        """
        return pulumi.get(self, "environment")

    @property
    @pulumi.getter
    def parameters(self) -> Optional[Sequence['outputs.ApplicationSpecSourceKsonnetParameters']]:
        """
        Parameters are a list of ksonnet component parameter override values
        """
        return pulumi.get(self, "parameters")


@pulumi.output_type
class ApplicationSpecSourceKsonnetParameters(dict):
    """
    KsonnetParameter is a ksonnet component parameter
    """
    def __init__(__self__, *,
                 name: str,
                 value: str,
                 component: Optional[str] = None):
        """
        KsonnetParameter is a ksonnet component parameter
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)
        if component is not None:
            pulumi.set(__self__, "component", component)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def component(self) -> Optional[str]:
        return pulumi.get(self, "component")


@pulumi.output_type
class ApplicationSpecSourceKustomize(dict):
    """
    Kustomize holds kustomize specific options
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "commonAnnotations":
            suggest = "common_annotations"
        elif key == "commonLabels":
            suggest = "common_labels"
        elif key == "forceCommonAnnotations":
            suggest = "force_common_annotations"
        elif key == "forceCommonLabels":
            suggest = "force_common_labels"
        elif key == "namePrefix":
            suggest = "name_prefix"
        elif key == "nameSuffix":
            suggest = "name_suffix"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSpecSourceKustomize. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSpecSourceKustomize.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSpecSourceKustomize.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 common_annotations: Optional[Mapping[str, str]] = None,
                 common_labels: Optional[Mapping[str, str]] = None,
                 force_common_annotations: Optional[bool] = None,
                 force_common_labels: Optional[bool] = None,
                 images: Optional[Sequence[str]] = None,
                 name_prefix: Optional[str] = None,
                 name_suffix: Optional[str] = None,
                 version: Optional[str] = None):
        """
        Kustomize holds kustomize specific options
        :param Mapping[str, str] common_annotations: CommonAnnotations is a list of additional annotations to add to rendered manifests
        :param Mapping[str, str] common_labels: CommonLabels is a list of additional labels to add to rendered manifests
        :param bool force_common_annotations: ForceCommonAnnotations specifies whether to force applying common annotations to resources for Kustomize apps
        :param bool force_common_labels: ForceCommonLabels specifies whether to force applying common labels to resources for Kustomize apps
        :param Sequence[str] images: Images is a list of Kustomize image override specifications
        :param str name_prefix: NamePrefix is a prefix appended to resources for Kustomize apps
        :param str name_suffix: NameSuffix is a suffix appended to resources for Kustomize apps
        :param str version: Version controls which version of Kustomize to use for rendering manifests
        """
        if common_annotations is not None:
            pulumi.set(__self__, "common_annotations", common_annotations)
        if common_labels is not None:
            pulumi.set(__self__, "common_labels", common_labels)
        if force_common_annotations is not None:
            pulumi.set(__self__, "force_common_annotations", force_common_annotations)
        if force_common_labels is not None:
            pulumi.set(__self__, "force_common_labels", force_common_labels)
        if images is not None:
            pulumi.set(__self__, "images", images)
        if name_prefix is not None:
            pulumi.set(__self__, "name_prefix", name_prefix)
        if name_suffix is not None:
            pulumi.set(__self__, "name_suffix", name_suffix)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="commonAnnotations")
    def common_annotations(self) -> Optional[Mapping[str, str]]:
        """
        CommonAnnotations is a list of additional annotations to add to rendered manifests
        """
        return pulumi.get(self, "common_annotations")

    @property
    @pulumi.getter(name="commonLabels")
    def common_labels(self) -> Optional[Mapping[str, str]]:
        """
        CommonLabels is a list of additional labels to add to rendered manifests
        """
        return pulumi.get(self, "common_labels")

    @property
    @pulumi.getter(name="forceCommonAnnotations")
    def force_common_annotations(self) -> Optional[bool]:
        """
        ForceCommonAnnotations specifies whether to force applying common annotations to resources for Kustomize apps
        """
        return pulumi.get(self, "force_common_annotations")

    @property
    @pulumi.getter(name="forceCommonLabels")
    def force_common_labels(self) -> Optional[bool]:
        """
        ForceCommonLabels specifies whether to force applying common labels to resources for Kustomize apps
        """
        return pulumi.get(self, "force_common_labels")

    @property
    @pulumi.getter
    def images(self) -> Optional[Sequence[str]]:
        """
        Images is a list of Kustomize image override specifications
        """
        return pulumi.get(self, "images")

    @property
    @pulumi.getter(name="namePrefix")
    def name_prefix(self) -> Optional[str]:
        """
        NamePrefix is a prefix appended to resources for Kustomize apps
        """
        return pulumi.get(self, "name_prefix")

    @property
    @pulumi.getter(name="nameSuffix")
    def name_suffix(self) -> Optional[str]:
        """
        NameSuffix is a suffix appended to resources for Kustomize apps
        """
        return pulumi.get(self, "name_suffix")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        """
        Version controls which version of Kustomize to use for rendering manifests
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class ApplicationSpecSourcePlugin(dict):
    """
    ConfigManagementPlugin holds config management plugin specific options
    """
    def __init__(__self__, *,
                 env: Optional[Sequence['outputs.ApplicationSpecSourcePluginEnv']] = None,
                 name: Optional[str] = None):
        """
        ConfigManagementPlugin holds config management plugin specific options
        :param Sequence['ApplicationSpecSourcePluginEnvArgs'] env: Env is a list of environment variable entries
        """
        if env is not None:
            pulumi.set(__self__, "env", env)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def env(self) -> Optional[Sequence['outputs.ApplicationSpecSourcePluginEnv']]:
        """
        Env is a list of environment variable entries
        """
        return pulumi.get(self, "env")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class ApplicationSpecSourcePluginEnv(dict):
    """
    EnvEntry represents an entry in the application's environment
    """
    def __init__(__self__, *,
                 name: str,
                 value: str):
        """
        EnvEntry represents an entry in the application's environment
        :param str name: Name is the name of the variable, usually expressed in uppercase
        :param str value: Value is the value of the variable
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name is the name of the variable, usually expressed in uppercase
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value is the value of the variable
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationSpecSyncPolicy(dict):
    """
    SyncPolicy controls when and how a sync will be performed
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "syncOptions":
            suggest = "sync_options"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSpecSyncPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSpecSyncPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSpecSyncPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 automated: Optional['outputs.ApplicationSpecSyncPolicyAutomated'] = None,
                 retry: Optional['outputs.ApplicationSpecSyncPolicyRetry'] = None,
                 sync_options: Optional[Sequence[str]] = None):
        """
        SyncPolicy controls when and how a sync will be performed
        :param 'ApplicationSpecSyncPolicyAutomatedArgs' automated: Automated will keep an application synced to the target revision
        :param 'ApplicationSpecSyncPolicyRetryArgs' retry: Retry controls failed sync retry behavior
        :param Sequence[str] sync_options: Options allow you to specify whole app sync-options
        """
        if automated is not None:
            pulumi.set(__self__, "automated", automated)
        if retry is not None:
            pulumi.set(__self__, "retry", retry)
        if sync_options is not None:
            pulumi.set(__self__, "sync_options", sync_options)

    @property
    @pulumi.getter
    def automated(self) -> Optional['outputs.ApplicationSpecSyncPolicyAutomated']:
        """
        Automated will keep an application synced to the target revision
        """
        return pulumi.get(self, "automated")

    @property
    @pulumi.getter
    def retry(self) -> Optional['outputs.ApplicationSpecSyncPolicyRetry']:
        """
        Retry controls failed sync retry behavior
        """
        return pulumi.get(self, "retry")

    @property
    @pulumi.getter(name="syncOptions")
    def sync_options(self) -> Optional[Sequence[str]]:
        """
        Options allow you to specify whole app sync-options
        """
        return pulumi.get(self, "sync_options")


@pulumi.output_type
class ApplicationSpecSyncPolicyAutomated(dict):
    """
    Automated will keep an application synced to the target revision
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowEmpty":
            suggest = "allow_empty"
        elif key == "selfHeal":
            suggest = "self_heal"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSpecSyncPolicyAutomated. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSpecSyncPolicyAutomated.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSpecSyncPolicyAutomated.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allow_empty: Optional[bool] = None,
                 prune: Optional[bool] = None,
                 self_heal: Optional[bool] = None):
        """
        Automated will keep an application synced to the target revision
        :param bool allow_empty: AllowEmpty allows apps have zero live resources (default: false)
        :param bool prune: Prune specifies whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync (default: false)
        :param bool self_heal: SelfHeal specifes whether to revert resources back to their desired state upon modification in the cluster (default: false)
        """
        if allow_empty is not None:
            pulumi.set(__self__, "allow_empty", allow_empty)
        if prune is not None:
            pulumi.set(__self__, "prune", prune)
        if self_heal is not None:
            pulumi.set(__self__, "self_heal", self_heal)

    @property
    @pulumi.getter(name="allowEmpty")
    def allow_empty(self) -> Optional[bool]:
        """
        AllowEmpty allows apps have zero live resources (default: false)
        """
        return pulumi.get(self, "allow_empty")

    @property
    @pulumi.getter
    def prune(self) -> Optional[bool]:
        """
        Prune specifies whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync (default: false)
        """
        return pulumi.get(self, "prune")

    @property
    @pulumi.getter(name="selfHeal")
    def self_heal(self) -> Optional[bool]:
        """
        SelfHeal specifes whether to revert resources back to their desired state upon modification in the cluster (default: false)
        """
        return pulumi.get(self, "self_heal")


@pulumi.output_type
class ApplicationSpecSyncPolicyRetry(dict):
    """
    Retry controls failed sync retry behavior
    """
    def __init__(__self__, *,
                 backoff: Optional['outputs.ApplicationSpecSyncPolicyRetryBackoff'] = None,
                 limit: Optional[int] = None):
        """
        Retry controls failed sync retry behavior
        :param 'ApplicationSpecSyncPolicyRetryBackoffArgs' backoff: Backoff controls how to backoff on subsequent retries of failed syncs
        :param int limit: Limit is the maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.
        """
        if backoff is not None:
            pulumi.set(__self__, "backoff", backoff)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)

    @property
    @pulumi.getter
    def backoff(self) -> Optional['outputs.ApplicationSpecSyncPolicyRetryBackoff']:
        """
        Backoff controls how to backoff on subsequent retries of failed syncs
        """
        return pulumi.get(self, "backoff")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        """
        Limit is the maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.
        """
        return pulumi.get(self, "limit")


@pulumi.output_type
class ApplicationSpecSyncPolicyRetryBackoff(dict):
    """
    Backoff controls how to backoff on subsequent retries of failed syncs
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxDuration":
            suggest = "max_duration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSpecSyncPolicyRetryBackoff. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSpecSyncPolicyRetryBackoff.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSpecSyncPolicyRetryBackoff.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 duration: Optional[str] = None,
                 factor: Optional[int] = None,
                 max_duration: Optional[str] = None):
        """
        Backoff controls how to backoff on subsequent retries of failed syncs
        :param str duration: Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. "2m", "1h")
        :param int factor: Factor is a factor to multiply the base duration after each failed retry
        :param str max_duration: MaxDuration is the maximum amount of time allowed for the backoff strategy
        """
        if duration is not None:
            pulumi.set(__self__, "duration", duration)
        if factor is not None:
            pulumi.set(__self__, "factor", factor)
        if max_duration is not None:
            pulumi.set(__self__, "max_duration", max_duration)

    @property
    @pulumi.getter
    def duration(self) -> Optional[str]:
        """
        Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. "2m", "1h")
        """
        return pulumi.get(self, "duration")

    @property
    @pulumi.getter
    def factor(self) -> Optional[int]:
        """
        Factor is a factor to multiply the base duration after each failed retry
        """
        return pulumi.get(self, "factor")

    @property
    @pulumi.getter(name="maxDuration")
    def max_duration(self) -> Optional[str]:
        """
        MaxDuration is the maximum amount of time allowed for the backoff strategy
        """
        return pulumi.get(self, "max_duration")


@pulumi.output_type
class ApplicationStatus(dict):
    """
    ApplicationStatus contains status information for the application
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "observedAt":
            suggest = "observed_at"
        elif key == "operationState":
            suggest = "operation_state"
        elif key == "reconciledAt":
            suggest = "reconciled_at"
        elif key == "sourceType":
            suggest = "source_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationStatus. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationStatus.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationStatus.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 conditions: Optional[Sequence['outputs.ApplicationStatusConditions']] = None,
                 health: Optional['outputs.ApplicationStatusHealth'] = None,
                 history: Optional[Sequence['outputs.ApplicationStatusHistory']] = None,
                 observed_at: Optional[str] = None,
                 operation_state: Optional['outputs.ApplicationStatusOperationState'] = None,
                 reconciled_at: Optional[str] = None,
                 resources: Optional[Sequence['outputs.ApplicationStatusResources']] = None,
                 source_type: Optional[str] = None,
                 summary: Optional['outputs.ApplicationStatusSummary'] = None,
                 sync: Optional['outputs.ApplicationStatusSync'] = None):
        """
        ApplicationStatus contains status information for the application
        :param Sequence['ApplicationStatusConditionsArgs'] conditions: Conditions is a list of currently observed application conditions
        :param 'ApplicationStatusHealthArgs' health: Health contains information about the application's current health status
        :param Sequence['ApplicationStatusHistoryArgs'] history: History contains information about the application's sync history
        :param str observed_at: ObservedAt indicates when the application state was updated without querying latest git state Deprecated: controller no longer updates ObservedAt field
        :param 'ApplicationStatusOperationStateArgs' operation_state: OperationState contains information about any ongoing operations, such as a sync
        :param str reconciled_at: ReconciledAt indicates when the application state was reconciled using the latest git version
        :param Sequence['ApplicationStatusResourcesArgs'] resources: Resources is a list of Kubernetes resources managed by this application
        :param str source_type: SourceType specifies the type of this application
        :param 'ApplicationStatusSummaryArgs' summary: Summary contains a list of URLs and container images used by this application
        :param 'ApplicationStatusSyncArgs' sync: Sync contains information about the application's current sync status
        """
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)
        if health is not None:
            pulumi.set(__self__, "health", health)
        if history is not None:
            pulumi.set(__self__, "history", history)
        if observed_at is not None:
            pulumi.set(__self__, "observed_at", observed_at)
        if operation_state is not None:
            pulumi.set(__self__, "operation_state", operation_state)
        if reconciled_at is not None:
            pulumi.set(__self__, "reconciled_at", reconciled_at)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)
        if source_type is not None:
            pulumi.set(__self__, "source_type", source_type)
        if summary is not None:
            pulumi.set(__self__, "summary", summary)
        if sync is not None:
            pulumi.set(__self__, "sync", sync)

    @property
    @pulumi.getter
    def conditions(self) -> Optional[Sequence['outputs.ApplicationStatusConditions']]:
        """
        Conditions is a list of currently observed application conditions
        """
        return pulumi.get(self, "conditions")

    @property
    @pulumi.getter
    def health(self) -> Optional['outputs.ApplicationStatusHealth']:
        """
        Health contains information about the application's current health status
        """
        return pulumi.get(self, "health")

    @property
    @pulumi.getter
    def history(self) -> Optional[Sequence['outputs.ApplicationStatusHistory']]:
        """
        History contains information about the application's sync history
        """
        return pulumi.get(self, "history")

    @property
    @pulumi.getter(name="observedAt")
    def observed_at(self) -> Optional[str]:
        """
        ObservedAt indicates when the application state was updated without querying latest git state Deprecated: controller no longer updates ObservedAt field
        """
        return pulumi.get(self, "observed_at")

    @property
    @pulumi.getter(name="operationState")
    def operation_state(self) -> Optional['outputs.ApplicationStatusOperationState']:
        """
        OperationState contains information about any ongoing operations, such as a sync
        """
        return pulumi.get(self, "operation_state")

    @property
    @pulumi.getter(name="reconciledAt")
    def reconciled_at(self) -> Optional[str]:
        """
        ReconciledAt indicates when the application state was reconciled using the latest git version
        """
        return pulumi.get(self, "reconciled_at")

    @property
    @pulumi.getter
    def resources(self) -> Optional[Sequence['outputs.ApplicationStatusResources']]:
        """
        Resources is a list of Kubernetes resources managed by this application
        """
        return pulumi.get(self, "resources")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> Optional[str]:
        """
        SourceType specifies the type of this application
        """
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter
    def summary(self) -> Optional['outputs.ApplicationStatusSummary']:
        """
        Summary contains a list of URLs and container images used by this application
        """
        return pulumi.get(self, "summary")

    @property
    @pulumi.getter
    def sync(self) -> Optional['outputs.ApplicationStatusSync']:
        """
        Sync contains information about the application's current sync status
        """
        return pulumi.get(self, "sync")


@pulumi.output_type
class ApplicationStatusConditions(dict):
    """
    ApplicationCondition contains details about an application condition, which is usally an error or warning
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "lastTransitionTime":
            suggest = "last_transition_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationStatusConditions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationStatusConditions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationStatusConditions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 message: str,
                 type: str,
                 last_transition_time: Optional[str] = None):
        """
        ApplicationCondition contains details about an application condition, which is usally an error or warning
        :param str message: Message contains human-readable message indicating details about condition
        :param str type: Type is an application condition type
        :param str last_transition_time: LastTransitionTime is the time the condition was last observed
        """
        pulumi.set(__self__, "message", message)
        pulumi.set(__self__, "type", type)
        if last_transition_time is not None:
            pulumi.set(__self__, "last_transition_time", last_transition_time)

    @property
    @pulumi.getter
    def message(self) -> str:
        """
        Message contains human-readable message indicating details about condition
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type is an application condition type
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="lastTransitionTime")
    def last_transition_time(self) -> Optional[str]:
        """
        LastTransitionTime is the time the condition was last observed
        """
        return pulumi.get(self, "last_transition_time")


@pulumi.output_type
class ApplicationStatusHealth(dict):
    """
    Health contains information about the application's current health status
    """
    def __init__(__self__, *,
                 message: Optional[str] = None,
                 status: Optional[str] = None):
        """
        Health contains information about the application's current health status
        :param str message: Message is a human-readable informational message describing the health status
        :param str status: Status holds the status code of the application or resource
        """
        if message is not None:
            pulumi.set(__self__, "message", message)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        """
        Message is a human-readable informational message describing the health status
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        Status holds the status code of the application or resource
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class ApplicationStatusHistory(dict):
    """
    RevisionHistory contains history information about a previous sync
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "deployedAt":
            suggest = "deployed_at"
        elif key == "deployStartedAt":
            suggest = "deploy_started_at"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationStatusHistory. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationStatusHistory.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationStatusHistory.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 deployed_at: str,
                 id: int,
                 revision: str,
                 deploy_started_at: Optional[str] = None,
                 source: Optional['outputs.ApplicationStatusHistorySource'] = None):
        """
        RevisionHistory contains history information about a previous sync
        :param str deployed_at: DeployedAt holds the time the sync operation completed
        :param int id: ID is an auto incrementing identifier of the RevisionHistory
        :param str revision: Revision holds the revision the sync was performed against
        :param str deploy_started_at: DeployStartedAt holds the time the sync operation started
        :param 'ApplicationStatusHistorySourceArgs' source: Source is a reference to the application source used for the sync operation
        """
        pulumi.set(__self__, "deployed_at", deployed_at)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "revision", revision)
        if deploy_started_at is not None:
            pulumi.set(__self__, "deploy_started_at", deploy_started_at)
        if source is not None:
            pulumi.set(__self__, "source", source)

    @property
    @pulumi.getter(name="deployedAt")
    def deployed_at(self) -> str:
        """
        DeployedAt holds the time the sync operation completed
        """
        return pulumi.get(self, "deployed_at")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        ID is an auto incrementing identifier of the RevisionHistory
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def revision(self) -> str:
        """
        Revision holds the revision the sync was performed against
        """
        return pulumi.get(self, "revision")

    @property
    @pulumi.getter(name="deployStartedAt")
    def deploy_started_at(self) -> Optional[str]:
        """
        DeployStartedAt holds the time the sync operation started
        """
        return pulumi.get(self, "deploy_started_at")

    @property
    @pulumi.getter
    def source(self) -> Optional['outputs.ApplicationStatusHistorySource']:
        """
        Source is a reference to the application source used for the sync operation
        """
        return pulumi.get(self, "source")


@pulumi.output_type
class ApplicationStatusHistorySource(dict):
    """
    Source is a reference to the application source used for the sync operation
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "repoURL":
            suggest = "repo_url"
        elif key == "targetRevision":
            suggest = "target_revision"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationStatusHistorySource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationStatusHistorySource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationStatusHistorySource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 repo_url: str,
                 chart: Optional[str] = None,
                 directory: Optional['outputs.ApplicationStatusHistorySourceDirectory'] = None,
                 helm: Optional['outputs.ApplicationStatusHistorySourceHelm'] = None,
                 ksonnet: Optional['outputs.ApplicationStatusHistorySourceKsonnet'] = None,
                 kustomize: Optional['outputs.ApplicationStatusHistorySourceKustomize'] = None,
                 path: Optional[str] = None,
                 plugin: Optional['outputs.ApplicationStatusHistorySourcePlugin'] = None,
                 target_revision: Optional[str] = None):
        """
        Source is a reference to the application source used for the sync operation
        :param str repo_url: RepoURL is the URL to the repository (Git or Helm) that contains the application manifests
        :param str chart: Chart is a Helm chart name, and must be specified for applications sourced from a Helm repo.
        :param 'ApplicationStatusHistorySourceDirectoryArgs' directory: Directory holds path/directory specific options
        :param 'ApplicationStatusHistorySourceHelmArgs' helm: Helm holds helm specific options
        :param 'ApplicationStatusHistorySourceKsonnetArgs' ksonnet: Ksonnet holds ksonnet specific options
        :param 'ApplicationStatusHistorySourceKustomizeArgs' kustomize: Kustomize holds kustomize specific options
        :param str path: Path is a directory path within the Git repository, and is only valid for applications sourced from Git.
        :param 'ApplicationStatusHistorySourcePluginArgs' plugin: ConfigManagementPlugin holds config management plugin specific options
        :param str target_revision: TargetRevision defines the revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
        """
        pulumi.set(__self__, "repo_url", repo_url)
        if chart is not None:
            pulumi.set(__self__, "chart", chart)
        if directory is not None:
            pulumi.set(__self__, "directory", directory)
        if helm is not None:
            pulumi.set(__self__, "helm", helm)
        if ksonnet is not None:
            pulumi.set(__self__, "ksonnet", ksonnet)
        if kustomize is not None:
            pulumi.set(__self__, "kustomize", kustomize)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if plugin is not None:
            pulumi.set(__self__, "plugin", plugin)
        if target_revision is not None:
            pulumi.set(__self__, "target_revision", target_revision)

    @property
    @pulumi.getter(name="repoURL")
    def repo_url(self) -> str:
        """
        RepoURL is the URL to the repository (Git or Helm) that contains the application manifests
        """
        return pulumi.get(self, "repo_url")

    @property
    @pulumi.getter
    def chart(self) -> Optional[str]:
        """
        Chart is a Helm chart name, and must be specified for applications sourced from a Helm repo.
        """
        return pulumi.get(self, "chart")

    @property
    @pulumi.getter
    def directory(self) -> Optional['outputs.ApplicationStatusHistorySourceDirectory']:
        """
        Directory holds path/directory specific options
        """
        return pulumi.get(self, "directory")

    @property
    @pulumi.getter
    def helm(self) -> Optional['outputs.ApplicationStatusHistorySourceHelm']:
        """
        Helm holds helm specific options
        """
        return pulumi.get(self, "helm")

    @property
    @pulumi.getter
    def ksonnet(self) -> Optional['outputs.ApplicationStatusHistorySourceKsonnet']:
        """
        Ksonnet holds ksonnet specific options
        """
        return pulumi.get(self, "ksonnet")

    @property
    @pulumi.getter
    def kustomize(self) -> Optional['outputs.ApplicationStatusHistorySourceKustomize']:
        """
        Kustomize holds kustomize specific options
        """
        return pulumi.get(self, "kustomize")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        """
        Path is a directory path within the Git repository, and is only valid for applications sourced from Git.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def plugin(self) -> Optional['outputs.ApplicationStatusHistorySourcePlugin']:
        """
        ConfigManagementPlugin holds config management plugin specific options
        """
        return pulumi.get(self, "plugin")

    @property
    @pulumi.getter(name="targetRevision")
    def target_revision(self) -> Optional[str]:
        """
        TargetRevision defines the revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
        """
        return pulumi.get(self, "target_revision")


@pulumi.output_type
class ApplicationStatusHistorySourceDirectory(dict):
    """
    Directory holds path/directory specific options
    """
    def __init__(__self__, *,
                 exclude: Optional[str] = None,
                 include: Optional[str] = None,
                 jsonnet: Optional['outputs.ApplicationStatusHistorySourceDirectoryJsonnet'] = None,
                 recurse: Optional[bool] = None):
        """
        Directory holds path/directory specific options
        :param str exclude: Exclude contains a glob pattern to match paths against that should be explicitly excluded from being used during manifest generation
        :param str include: Include contains a glob pattern to match paths against that should be explicitly included during manifest generation
        :param 'ApplicationStatusHistorySourceDirectoryJsonnetArgs' jsonnet: Jsonnet holds options specific to Jsonnet
        :param bool recurse: Recurse specifies whether to scan a directory recursively for manifests
        """
        if exclude is not None:
            pulumi.set(__self__, "exclude", exclude)
        if include is not None:
            pulumi.set(__self__, "include", include)
        if jsonnet is not None:
            pulumi.set(__self__, "jsonnet", jsonnet)
        if recurse is not None:
            pulumi.set(__self__, "recurse", recurse)

    @property
    @pulumi.getter
    def exclude(self) -> Optional[str]:
        """
        Exclude contains a glob pattern to match paths against that should be explicitly excluded from being used during manifest generation
        """
        return pulumi.get(self, "exclude")

    @property
    @pulumi.getter
    def include(self) -> Optional[str]:
        """
        Include contains a glob pattern to match paths against that should be explicitly included during manifest generation
        """
        return pulumi.get(self, "include")

    @property
    @pulumi.getter
    def jsonnet(self) -> Optional['outputs.ApplicationStatusHistorySourceDirectoryJsonnet']:
        """
        Jsonnet holds options specific to Jsonnet
        """
        return pulumi.get(self, "jsonnet")

    @property
    @pulumi.getter
    def recurse(self) -> Optional[bool]:
        """
        Recurse specifies whether to scan a directory recursively for manifests
        """
        return pulumi.get(self, "recurse")


@pulumi.output_type
class ApplicationStatusHistorySourceDirectoryJsonnet(dict):
    """
    Jsonnet holds options specific to Jsonnet
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "extVars":
            suggest = "ext_vars"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationStatusHistorySourceDirectoryJsonnet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationStatusHistorySourceDirectoryJsonnet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationStatusHistorySourceDirectoryJsonnet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ext_vars: Optional[Sequence['outputs.ApplicationStatusHistorySourceDirectoryJsonnetExtVars']] = None,
                 libs: Optional[Sequence[str]] = None,
                 tlas: Optional[Sequence['outputs.ApplicationStatusHistorySourceDirectoryJsonnetTlas']] = None):
        """
        Jsonnet holds options specific to Jsonnet
        :param Sequence['ApplicationStatusHistorySourceDirectoryJsonnetExtVarsArgs'] ext_vars: ExtVars is a list of Jsonnet External Variables
        :param Sequence[str] libs: Additional library search dirs
        :param Sequence['ApplicationStatusHistorySourceDirectoryJsonnetTlasArgs'] tlas: TLAS is a list of Jsonnet Top-level Arguments
        """
        if ext_vars is not None:
            pulumi.set(__self__, "ext_vars", ext_vars)
        if libs is not None:
            pulumi.set(__self__, "libs", libs)
        if tlas is not None:
            pulumi.set(__self__, "tlas", tlas)

    @property
    @pulumi.getter(name="extVars")
    def ext_vars(self) -> Optional[Sequence['outputs.ApplicationStatusHistorySourceDirectoryJsonnetExtVars']]:
        """
        ExtVars is a list of Jsonnet External Variables
        """
        return pulumi.get(self, "ext_vars")

    @property
    @pulumi.getter
    def libs(self) -> Optional[Sequence[str]]:
        """
        Additional library search dirs
        """
        return pulumi.get(self, "libs")

    @property
    @pulumi.getter
    def tlas(self) -> Optional[Sequence['outputs.ApplicationStatusHistorySourceDirectoryJsonnetTlas']]:
        """
        TLAS is a list of Jsonnet Top-level Arguments
        """
        return pulumi.get(self, "tlas")


@pulumi.output_type
class ApplicationStatusHistorySourceDirectoryJsonnetExtVars(dict):
    """
    JsonnetVar represents a variable to be passed to jsonnet during manifest generation
    """
    def __init__(__self__, *,
                 name: str,
                 value: str,
                 code: Optional[bool] = None):
        """
        JsonnetVar represents a variable to be passed to jsonnet during manifest generation
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)
        if code is not None:
            pulumi.set(__self__, "code", code)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def code(self) -> Optional[bool]:
        return pulumi.get(self, "code")


@pulumi.output_type
class ApplicationStatusHistorySourceDirectoryJsonnetTlas(dict):
    """
    JsonnetVar represents a variable to be passed to jsonnet during manifest generation
    """
    def __init__(__self__, *,
                 name: str,
                 value: str,
                 code: Optional[bool] = None):
        """
        JsonnetVar represents a variable to be passed to jsonnet during manifest generation
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)
        if code is not None:
            pulumi.set(__self__, "code", code)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def code(self) -> Optional[bool]:
        return pulumi.get(self, "code")


@pulumi.output_type
class ApplicationStatusHistorySourceHelm(dict):
    """
    Helm holds helm specific options
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fileParameters":
            suggest = "file_parameters"
        elif key == "passCredentials":
            suggest = "pass_credentials"
        elif key == "releaseName":
            suggest = "release_name"
        elif key == "valueFiles":
            suggest = "value_files"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationStatusHistorySourceHelm. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationStatusHistorySourceHelm.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationStatusHistorySourceHelm.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 file_parameters: Optional[Sequence['outputs.ApplicationStatusHistorySourceHelmFileParameters']] = None,
                 parameters: Optional[Sequence['outputs.ApplicationStatusHistorySourceHelmParameters']] = None,
                 pass_credentials: Optional[bool] = None,
                 release_name: Optional[str] = None,
                 value_files: Optional[Sequence[str]] = None,
                 values: Optional[str] = None,
                 version: Optional[str] = None):
        """
        Helm holds helm specific options
        :param Sequence['ApplicationStatusHistorySourceHelmFileParametersArgs'] file_parameters: FileParameters are file parameters to the helm template
        :param Sequence['ApplicationStatusHistorySourceHelmParametersArgs'] parameters: Parameters is a list of Helm parameters which are passed to the helm template command upon manifest generation
        :param bool pass_credentials: PassCredentials pass credentials to all domains (Helm's --pass-credentials)
        :param str release_name: ReleaseName is the Helm release name to use. If omitted it will use the application name
        :param Sequence[str] value_files: ValuesFiles is a list of Helm value files to use when generating a template
        :param str values: Values specifies Helm values to be passed to helm template, typically defined as a block
        :param str version: Version is the Helm version to use for templating (either "2" or "3")
        """
        if file_parameters is not None:
            pulumi.set(__self__, "file_parameters", file_parameters)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if pass_credentials is not None:
            pulumi.set(__self__, "pass_credentials", pass_credentials)
        if release_name is not None:
            pulumi.set(__self__, "release_name", release_name)
        if value_files is not None:
            pulumi.set(__self__, "value_files", value_files)
        if values is not None:
            pulumi.set(__self__, "values", values)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="fileParameters")
    def file_parameters(self) -> Optional[Sequence['outputs.ApplicationStatusHistorySourceHelmFileParameters']]:
        """
        FileParameters are file parameters to the helm template
        """
        return pulumi.get(self, "file_parameters")

    @property
    @pulumi.getter
    def parameters(self) -> Optional[Sequence['outputs.ApplicationStatusHistorySourceHelmParameters']]:
        """
        Parameters is a list of Helm parameters which are passed to the helm template command upon manifest generation
        """
        return pulumi.get(self, "parameters")

    @property
    @pulumi.getter(name="passCredentials")
    def pass_credentials(self) -> Optional[bool]:
        """
        PassCredentials pass credentials to all domains (Helm's --pass-credentials)
        """
        return pulumi.get(self, "pass_credentials")

    @property
    @pulumi.getter(name="releaseName")
    def release_name(self) -> Optional[str]:
        """
        ReleaseName is the Helm release name to use. If omitted it will use the application name
        """
        return pulumi.get(self, "release_name")

    @property
    @pulumi.getter(name="valueFiles")
    def value_files(self) -> Optional[Sequence[str]]:
        """
        ValuesFiles is a list of Helm value files to use when generating a template
        """
        return pulumi.get(self, "value_files")

    @property
    @pulumi.getter
    def values(self) -> Optional[str]:
        """
        Values specifies Helm values to be passed to helm template, typically defined as a block
        """
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        """
        Version is the Helm version to use for templating (either "2" or "3")
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class ApplicationStatusHistorySourceHelmFileParameters(dict):
    """
    HelmFileParameter is a file parameter that's passed to helm template during manifest generation
    """
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 path: Optional[str] = None):
        """
        HelmFileParameter is a file parameter that's passed to helm template during manifest generation
        :param str name: Name is the name of the Helm parameter
        :param str path: Path is the path to the file containing the values for the Helm parameter
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if path is not None:
            pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name is the name of the Helm parameter
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        """
        Path is the path to the file containing the values for the Helm parameter
        """
        return pulumi.get(self, "path")


@pulumi.output_type
class ApplicationStatusHistorySourceHelmParameters(dict):
    """
    HelmParameter is a parameter that's passed to helm template during manifest generation
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "forceString":
            suggest = "force_string"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationStatusHistorySourceHelmParameters. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationStatusHistorySourceHelmParameters.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationStatusHistorySourceHelmParameters.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 force_string: Optional[bool] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        HelmParameter is a parameter that's passed to helm template during manifest generation
        :param bool force_string: ForceString determines whether to tell Helm to interpret booleans and numbers as strings
        :param str name: Name is the name of the Helm parameter
        :param str value: Value is the value for the Helm parameter
        """
        if force_string is not None:
            pulumi.set(__self__, "force_string", force_string)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="forceString")
    def force_string(self) -> Optional[bool]:
        """
        ForceString determines whether to tell Helm to interpret booleans and numbers as strings
        """
        return pulumi.get(self, "force_string")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name is the name of the Helm parameter
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value is the value for the Helm parameter
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationStatusHistorySourceKsonnet(dict):
    """
    Ksonnet holds ksonnet specific options
    """
    def __init__(__self__, *,
                 environment: Optional[str] = None,
                 parameters: Optional[Sequence['outputs.ApplicationStatusHistorySourceKsonnetParameters']] = None):
        """
        Ksonnet holds ksonnet specific options
        :param str environment: Environment is a ksonnet application environment name
        :param Sequence['ApplicationStatusHistorySourceKsonnetParametersArgs'] parameters: Parameters are a list of ksonnet component parameter override values
        """
        if environment is not None:
            pulumi.set(__self__, "environment", environment)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)

    @property
    @pulumi.getter
    def environment(self) -> Optional[str]:
        """
        Environment is a ksonnet application environment name
        """
        return pulumi.get(self, "environment")

    @property
    @pulumi.getter
    def parameters(self) -> Optional[Sequence['outputs.ApplicationStatusHistorySourceKsonnetParameters']]:
        """
        Parameters are a list of ksonnet component parameter override values
        """
        return pulumi.get(self, "parameters")


@pulumi.output_type
class ApplicationStatusHistorySourceKsonnetParameters(dict):
    """
    KsonnetParameter is a ksonnet component parameter
    """
    def __init__(__self__, *,
                 name: str,
                 value: str,
                 component: Optional[str] = None):
        """
        KsonnetParameter is a ksonnet component parameter
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)
        if component is not None:
            pulumi.set(__self__, "component", component)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def component(self) -> Optional[str]:
        return pulumi.get(self, "component")


@pulumi.output_type
class ApplicationStatusHistorySourceKustomize(dict):
    """
    Kustomize holds kustomize specific options
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "commonAnnotations":
            suggest = "common_annotations"
        elif key == "commonLabels":
            suggest = "common_labels"
        elif key == "forceCommonAnnotations":
            suggest = "force_common_annotations"
        elif key == "forceCommonLabels":
            suggest = "force_common_labels"
        elif key == "namePrefix":
            suggest = "name_prefix"
        elif key == "nameSuffix":
            suggest = "name_suffix"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationStatusHistorySourceKustomize. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationStatusHistorySourceKustomize.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationStatusHistorySourceKustomize.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 common_annotations: Optional[Mapping[str, str]] = None,
                 common_labels: Optional[Mapping[str, str]] = None,
                 force_common_annotations: Optional[bool] = None,
                 force_common_labels: Optional[bool] = None,
                 images: Optional[Sequence[str]] = None,
                 name_prefix: Optional[str] = None,
                 name_suffix: Optional[str] = None,
                 version: Optional[str] = None):
        """
        Kustomize holds kustomize specific options
        :param Mapping[str, str] common_annotations: CommonAnnotations is a list of additional annotations to add to rendered manifests
        :param Mapping[str, str] common_labels: CommonLabels is a list of additional labels to add to rendered manifests
        :param bool force_common_annotations: ForceCommonAnnotations specifies whether to force applying common annotations to resources for Kustomize apps
        :param bool force_common_labels: ForceCommonLabels specifies whether to force applying common labels to resources for Kustomize apps
        :param Sequence[str] images: Images is a list of Kustomize image override specifications
        :param str name_prefix: NamePrefix is a prefix appended to resources for Kustomize apps
        :param str name_suffix: NameSuffix is a suffix appended to resources for Kustomize apps
        :param str version: Version controls which version of Kustomize to use for rendering manifests
        """
        if common_annotations is not None:
            pulumi.set(__self__, "common_annotations", common_annotations)
        if common_labels is not None:
            pulumi.set(__self__, "common_labels", common_labels)
        if force_common_annotations is not None:
            pulumi.set(__self__, "force_common_annotations", force_common_annotations)
        if force_common_labels is not None:
            pulumi.set(__self__, "force_common_labels", force_common_labels)
        if images is not None:
            pulumi.set(__self__, "images", images)
        if name_prefix is not None:
            pulumi.set(__self__, "name_prefix", name_prefix)
        if name_suffix is not None:
            pulumi.set(__self__, "name_suffix", name_suffix)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="commonAnnotations")
    def common_annotations(self) -> Optional[Mapping[str, str]]:
        """
        CommonAnnotations is a list of additional annotations to add to rendered manifests
        """
        return pulumi.get(self, "common_annotations")

    @property
    @pulumi.getter(name="commonLabels")
    def common_labels(self) -> Optional[Mapping[str, str]]:
        """
        CommonLabels is a list of additional labels to add to rendered manifests
        """
        return pulumi.get(self, "common_labels")

    @property
    @pulumi.getter(name="forceCommonAnnotations")
    def force_common_annotations(self) -> Optional[bool]:
        """
        ForceCommonAnnotations specifies whether to force applying common annotations to resources for Kustomize apps
        """
        return pulumi.get(self, "force_common_annotations")

    @property
    @pulumi.getter(name="forceCommonLabels")
    def force_common_labels(self) -> Optional[bool]:
        """
        ForceCommonLabels specifies whether to force applying common labels to resources for Kustomize apps
        """
        return pulumi.get(self, "force_common_labels")

    @property
    @pulumi.getter
    def images(self) -> Optional[Sequence[str]]:
        """
        Images is a list of Kustomize image override specifications
        """
        return pulumi.get(self, "images")

    @property
    @pulumi.getter(name="namePrefix")
    def name_prefix(self) -> Optional[str]:
        """
        NamePrefix is a prefix appended to resources for Kustomize apps
        """
        return pulumi.get(self, "name_prefix")

    @property
    @pulumi.getter(name="nameSuffix")
    def name_suffix(self) -> Optional[str]:
        """
        NameSuffix is a suffix appended to resources for Kustomize apps
        """
        return pulumi.get(self, "name_suffix")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        """
        Version controls which version of Kustomize to use for rendering manifests
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class ApplicationStatusHistorySourcePlugin(dict):
    """
    ConfigManagementPlugin holds config management plugin specific options
    """
    def __init__(__self__, *,
                 env: Optional[Sequence['outputs.ApplicationStatusHistorySourcePluginEnv']] = None,
                 name: Optional[str] = None):
        """
        ConfigManagementPlugin holds config management plugin specific options
        :param Sequence['ApplicationStatusHistorySourcePluginEnvArgs'] env: Env is a list of environment variable entries
        """
        if env is not None:
            pulumi.set(__self__, "env", env)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def env(self) -> Optional[Sequence['outputs.ApplicationStatusHistorySourcePluginEnv']]:
        """
        Env is a list of environment variable entries
        """
        return pulumi.get(self, "env")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class ApplicationStatusHistorySourcePluginEnv(dict):
    """
    EnvEntry represents an entry in the application's environment
    """
    def __init__(__self__, *,
                 name: str,
                 value: str):
        """
        EnvEntry represents an entry in the application's environment
        :param str name: Name is the name of the variable, usually expressed in uppercase
        :param str value: Value is the value of the variable
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name is the name of the variable, usually expressed in uppercase
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value is the value of the variable
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationStatusOperationState(dict):
    """
    OperationState contains information about any ongoing operations, such as a sync
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "startedAt":
            suggest = "started_at"
        elif key == "finishedAt":
            suggest = "finished_at"
        elif key == "retryCount":
            suggest = "retry_count"
        elif key == "syncResult":
            suggest = "sync_result"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationStatusOperationState. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationStatusOperationState.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationStatusOperationState.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 operation: 'outputs.ApplicationStatusOperationStateOperation',
                 phase: str,
                 started_at: str,
                 finished_at: Optional[str] = None,
                 message: Optional[str] = None,
                 retry_count: Optional[int] = None,
                 sync_result: Optional['outputs.ApplicationStatusOperationStateSyncResult'] = None):
        """
        OperationState contains information about any ongoing operations, such as a sync
        :param 'ApplicationStatusOperationStateOperationArgs' operation: Operation is the original requested operation
        :param str phase: Phase is the current phase of the operation
        :param str started_at: StartedAt contains time of operation start
        :param str finished_at: FinishedAt contains time of operation completion
        :param str message: Message holds any pertinent messages when attempting to perform operation (typically errors).
        :param int retry_count: RetryCount contains time of operation retries
        :param 'ApplicationStatusOperationStateSyncResultArgs' sync_result: SyncResult is the result of a Sync operation
        """
        pulumi.set(__self__, "operation", operation)
        pulumi.set(__self__, "phase", phase)
        pulumi.set(__self__, "started_at", started_at)
        if finished_at is not None:
            pulumi.set(__self__, "finished_at", finished_at)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if retry_count is not None:
            pulumi.set(__self__, "retry_count", retry_count)
        if sync_result is not None:
            pulumi.set(__self__, "sync_result", sync_result)

    @property
    @pulumi.getter
    def operation(self) -> 'outputs.ApplicationStatusOperationStateOperation':
        """
        Operation is the original requested operation
        """
        return pulumi.get(self, "operation")

    @property
    @pulumi.getter
    def phase(self) -> str:
        """
        Phase is the current phase of the operation
        """
        return pulumi.get(self, "phase")

    @property
    @pulumi.getter(name="startedAt")
    def started_at(self) -> str:
        """
        StartedAt contains time of operation start
        """
        return pulumi.get(self, "started_at")

    @property
    @pulumi.getter(name="finishedAt")
    def finished_at(self) -> Optional[str]:
        """
        FinishedAt contains time of operation completion
        """
        return pulumi.get(self, "finished_at")

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        """
        Message holds any pertinent messages when attempting to perform operation (typically errors).
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter(name="retryCount")
    def retry_count(self) -> Optional[int]:
        """
        RetryCount contains time of operation retries
        """
        return pulumi.get(self, "retry_count")

    @property
    @pulumi.getter(name="syncResult")
    def sync_result(self) -> Optional['outputs.ApplicationStatusOperationStateSyncResult']:
        """
        SyncResult is the result of a Sync operation
        """
        return pulumi.get(self, "sync_result")


@pulumi.output_type
class ApplicationStatusOperationStateOperation(dict):
    """
    Operation is the original requested operation
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "initiatedBy":
            suggest = "initiated_by"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationStatusOperationStateOperation. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationStatusOperationStateOperation.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationStatusOperationStateOperation.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 info: Optional[Sequence['outputs.ApplicationStatusOperationStateOperationInfo']] = None,
                 initiated_by: Optional['outputs.ApplicationStatusOperationStateOperationInitiatedBy'] = None,
                 retry: Optional['outputs.ApplicationStatusOperationStateOperationRetry'] = None,
                 sync: Optional['outputs.ApplicationStatusOperationStateOperationSync'] = None):
        """
        Operation is the original requested operation
        :param Sequence['ApplicationStatusOperationStateOperationInfoArgs'] info: Info is a list of informational items for this operation
        :param 'ApplicationStatusOperationStateOperationInitiatedByArgs' initiated_by: InitiatedBy contains information about who initiated the operations
        :param 'ApplicationStatusOperationStateOperationRetryArgs' retry: Retry controls the strategy to apply if a sync fails
        :param 'ApplicationStatusOperationStateOperationSyncArgs' sync: Sync contains parameters for the operation
        """
        if info is not None:
            pulumi.set(__self__, "info", info)
        if initiated_by is not None:
            pulumi.set(__self__, "initiated_by", initiated_by)
        if retry is not None:
            pulumi.set(__self__, "retry", retry)
        if sync is not None:
            pulumi.set(__self__, "sync", sync)

    @property
    @pulumi.getter
    def info(self) -> Optional[Sequence['outputs.ApplicationStatusOperationStateOperationInfo']]:
        """
        Info is a list of informational items for this operation
        """
        return pulumi.get(self, "info")

    @property
    @pulumi.getter(name="initiatedBy")
    def initiated_by(self) -> Optional['outputs.ApplicationStatusOperationStateOperationInitiatedBy']:
        """
        InitiatedBy contains information about who initiated the operations
        """
        return pulumi.get(self, "initiated_by")

    @property
    @pulumi.getter
    def retry(self) -> Optional['outputs.ApplicationStatusOperationStateOperationRetry']:
        """
        Retry controls the strategy to apply if a sync fails
        """
        return pulumi.get(self, "retry")

    @property
    @pulumi.getter
    def sync(self) -> Optional['outputs.ApplicationStatusOperationStateOperationSync']:
        """
        Sync contains parameters for the operation
        """
        return pulumi.get(self, "sync")


@pulumi.output_type
class ApplicationStatusOperationStateOperationInfo(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationStatusOperationStateOperationInitiatedBy(dict):
    """
    InitiatedBy contains information about who initiated the operations
    """
    def __init__(__self__, *,
                 automated: Optional[bool] = None,
                 username: Optional[str] = None):
        """
        InitiatedBy contains information about who initiated the operations
        :param bool automated: Automated is set to true if operation was initiated automatically by the application controller.
        :param str username: Username contains the name of a user who started operation
        """
        if automated is not None:
            pulumi.set(__self__, "automated", automated)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def automated(self) -> Optional[bool]:
        """
        Automated is set to true if operation was initiated automatically by the application controller.
        """
        return pulumi.get(self, "automated")

    @property
    @pulumi.getter
    def username(self) -> Optional[str]:
        """
        Username contains the name of a user who started operation
        """
        return pulumi.get(self, "username")


@pulumi.output_type
class ApplicationStatusOperationStateOperationRetry(dict):
    """
    Retry controls the strategy to apply if a sync fails
    """
    def __init__(__self__, *,
                 backoff: Optional['outputs.ApplicationStatusOperationStateOperationRetryBackoff'] = None,
                 limit: Optional[int] = None):
        """
        Retry controls the strategy to apply if a sync fails
        :param 'ApplicationStatusOperationStateOperationRetryBackoffArgs' backoff: Backoff controls how to backoff on subsequent retries of failed syncs
        :param int limit: Limit is the maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.
        """
        if backoff is not None:
            pulumi.set(__self__, "backoff", backoff)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)

    @property
    @pulumi.getter
    def backoff(self) -> Optional['outputs.ApplicationStatusOperationStateOperationRetryBackoff']:
        """
        Backoff controls how to backoff on subsequent retries of failed syncs
        """
        return pulumi.get(self, "backoff")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        """
        Limit is the maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.
        """
        return pulumi.get(self, "limit")


@pulumi.output_type
class ApplicationStatusOperationStateOperationRetryBackoff(dict):
    """
    Backoff controls how to backoff on subsequent retries of failed syncs
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxDuration":
            suggest = "max_duration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationStatusOperationStateOperationRetryBackoff. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationStatusOperationStateOperationRetryBackoff.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationStatusOperationStateOperationRetryBackoff.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 duration: Optional[str] = None,
                 factor: Optional[int] = None,
                 max_duration: Optional[str] = None):
        """
        Backoff controls how to backoff on subsequent retries of failed syncs
        :param str duration: Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. "2m", "1h")
        :param int factor: Factor is a factor to multiply the base duration after each failed retry
        :param str max_duration: MaxDuration is the maximum amount of time allowed for the backoff strategy
        """
        if duration is not None:
            pulumi.set(__self__, "duration", duration)
        if factor is not None:
            pulumi.set(__self__, "factor", factor)
        if max_duration is not None:
            pulumi.set(__self__, "max_duration", max_duration)

    @property
    @pulumi.getter
    def duration(self) -> Optional[str]:
        """
        Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. "2m", "1h")
        """
        return pulumi.get(self, "duration")

    @property
    @pulumi.getter
    def factor(self) -> Optional[int]:
        """
        Factor is a factor to multiply the base duration after each failed retry
        """
        return pulumi.get(self, "factor")

    @property
    @pulumi.getter(name="maxDuration")
    def max_duration(self) -> Optional[str]:
        """
        MaxDuration is the maximum amount of time allowed for the backoff strategy
        """
        return pulumi.get(self, "max_duration")


@pulumi.output_type
class ApplicationStatusOperationStateOperationSync(dict):
    """
    Sync contains parameters for the operation
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dryRun":
            suggest = "dry_run"
        elif key == "syncOptions":
            suggest = "sync_options"
        elif key == "syncStrategy":
            suggest = "sync_strategy"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationStatusOperationStateOperationSync. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationStatusOperationStateOperationSync.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationStatusOperationStateOperationSync.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dry_run: Optional[bool] = None,
                 manifests: Optional[Sequence[str]] = None,
                 prune: Optional[bool] = None,
                 resources: Optional[Sequence['outputs.ApplicationStatusOperationStateOperationSyncResources']] = None,
                 revision: Optional[str] = None,
                 source: Optional['outputs.ApplicationStatusOperationStateOperationSyncSource'] = None,
                 sync_options: Optional[Sequence[str]] = None,
                 sync_strategy: Optional['outputs.ApplicationStatusOperationStateOperationSyncSyncStrategy'] = None):
        """
        Sync contains parameters for the operation
        :param bool dry_run: DryRun specifies to perform a `kubectl apply --dry-run` without actually performing the sync
        :param Sequence[str] manifests: Manifests is an optional field that overrides sync source with a local directory for development
        :param bool prune: Prune specifies to delete resources from the cluster that are no longer tracked in git
        :param Sequence['ApplicationStatusOperationStateOperationSyncResourcesArgs'] resources: Resources describes which resources shall be part of the sync
        :param str revision: Revision is the revision (Git) or chart version (Helm) which to sync the application to If omitted, will use the revision specified in app spec.
        :param 'ApplicationStatusOperationStateOperationSyncSourceArgs' source: Source overrides the source definition set in the application. This is typically set in a Rollback operation and is nil during a Sync operation
        :param Sequence[str] sync_options: SyncOptions provide per-sync sync-options, e.g. Validate=false
        :param 'ApplicationStatusOperationStateOperationSyncSyncStrategyArgs' sync_strategy: SyncStrategy describes how to perform the sync
        """
        if dry_run is not None:
            pulumi.set(__self__, "dry_run", dry_run)
        if manifests is not None:
            pulumi.set(__self__, "manifests", manifests)
        if prune is not None:
            pulumi.set(__self__, "prune", prune)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)
        if revision is not None:
            pulumi.set(__self__, "revision", revision)
        if source is not None:
            pulumi.set(__self__, "source", source)
        if sync_options is not None:
            pulumi.set(__self__, "sync_options", sync_options)
        if sync_strategy is not None:
            pulumi.set(__self__, "sync_strategy", sync_strategy)

    @property
    @pulumi.getter(name="dryRun")
    def dry_run(self) -> Optional[bool]:
        """
        DryRun specifies to perform a `kubectl apply --dry-run` without actually performing the sync
        """
        return pulumi.get(self, "dry_run")

    @property
    @pulumi.getter
    def manifests(self) -> Optional[Sequence[str]]:
        """
        Manifests is an optional field that overrides sync source with a local directory for development
        """
        return pulumi.get(self, "manifests")

    @property
    @pulumi.getter
    def prune(self) -> Optional[bool]:
        """
        Prune specifies to delete resources from the cluster that are no longer tracked in git
        """
        return pulumi.get(self, "prune")

    @property
    @pulumi.getter
    def resources(self) -> Optional[Sequence['outputs.ApplicationStatusOperationStateOperationSyncResources']]:
        """
        Resources describes which resources shall be part of the sync
        """
        return pulumi.get(self, "resources")

    @property
    @pulumi.getter
    def revision(self) -> Optional[str]:
        """
        Revision is the revision (Git) or chart version (Helm) which to sync the application to If omitted, will use the revision specified in app spec.
        """
        return pulumi.get(self, "revision")

    @property
    @pulumi.getter
    def source(self) -> Optional['outputs.ApplicationStatusOperationStateOperationSyncSource']:
        """
        Source overrides the source definition set in the application. This is typically set in a Rollback operation and is nil during a Sync operation
        """
        return pulumi.get(self, "source")

    @property
    @pulumi.getter(name="syncOptions")
    def sync_options(self) -> Optional[Sequence[str]]:
        """
        SyncOptions provide per-sync sync-options, e.g. Validate=false
        """
        return pulumi.get(self, "sync_options")

    @property
    @pulumi.getter(name="syncStrategy")
    def sync_strategy(self) -> Optional['outputs.ApplicationStatusOperationStateOperationSyncSyncStrategy']:
        """
        SyncStrategy describes how to perform the sync
        """
        return pulumi.get(self, "sync_strategy")


@pulumi.output_type
class ApplicationStatusOperationStateOperationSyncResources(dict):
    """
    SyncOperationResource contains resources to sync.
    """
    def __init__(__self__, *,
                 kind: str,
                 name: str,
                 group: Optional[str] = None,
                 namespace: Optional[str] = None):
        """
        SyncOperationResource contains resources to sync.
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        if group is not None:
            pulumi.set(__self__, "group", group)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def kind(self) -> str:
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def group(self) -> Optional[str]:
        return pulumi.get(self, "group")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")


@pulumi.output_type
class ApplicationStatusOperationStateOperationSyncSource(dict):
    """
    Source overrides the source definition set in the application. This is typically set in a Rollback operation and is nil during a Sync operation
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "repoURL":
            suggest = "repo_url"
        elif key == "targetRevision":
            suggest = "target_revision"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationStatusOperationStateOperationSyncSource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationStatusOperationStateOperationSyncSource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationStatusOperationStateOperationSyncSource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 repo_url: str,
                 chart: Optional[str] = None,
                 directory: Optional['outputs.ApplicationStatusOperationStateOperationSyncSourceDirectory'] = None,
                 helm: Optional['outputs.ApplicationStatusOperationStateOperationSyncSourceHelm'] = None,
                 ksonnet: Optional['outputs.ApplicationStatusOperationStateOperationSyncSourceKsonnet'] = None,
                 kustomize: Optional['outputs.ApplicationStatusOperationStateOperationSyncSourceKustomize'] = None,
                 path: Optional[str] = None,
                 plugin: Optional['outputs.ApplicationStatusOperationStateOperationSyncSourcePlugin'] = None,
                 target_revision: Optional[str] = None):
        """
        Source overrides the source definition set in the application. This is typically set in a Rollback operation and is nil during a Sync operation
        :param str repo_url: RepoURL is the URL to the repository (Git or Helm) that contains the application manifests
        :param str chart: Chart is a Helm chart name, and must be specified for applications sourced from a Helm repo.
        :param 'ApplicationStatusOperationStateOperationSyncSourceDirectoryArgs' directory: Directory holds path/directory specific options
        :param 'ApplicationStatusOperationStateOperationSyncSourceHelmArgs' helm: Helm holds helm specific options
        :param 'ApplicationStatusOperationStateOperationSyncSourceKsonnetArgs' ksonnet: Ksonnet holds ksonnet specific options
        :param 'ApplicationStatusOperationStateOperationSyncSourceKustomizeArgs' kustomize: Kustomize holds kustomize specific options
        :param str path: Path is a directory path within the Git repository, and is only valid for applications sourced from Git.
        :param 'ApplicationStatusOperationStateOperationSyncSourcePluginArgs' plugin: ConfigManagementPlugin holds config management plugin specific options
        :param str target_revision: TargetRevision defines the revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
        """
        pulumi.set(__self__, "repo_url", repo_url)
        if chart is not None:
            pulumi.set(__self__, "chart", chart)
        if directory is not None:
            pulumi.set(__self__, "directory", directory)
        if helm is not None:
            pulumi.set(__self__, "helm", helm)
        if ksonnet is not None:
            pulumi.set(__self__, "ksonnet", ksonnet)
        if kustomize is not None:
            pulumi.set(__self__, "kustomize", kustomize)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if plugin is not None:
            pulumi.set(__self__, "plugin", plugin)
        if target_revision is not None:
            pulumi.set(__self__, "target_revision", target_revision)

    @property
    @pulumi.getter(name="repoURL")
    def repo_url(self) -> str:
        """
        RepoURL is the URL to the repository (Git or Helm) that contains the application manifests
        """
        return pulumi.get(self, "repo_url")

    @property
    @pulumi.getter
    def chart(self) -> Optional[str]:
        """
        Chart is a Helm chart name, and must be specified for applications sourced from a Helm repo.
        """
        return pulumi.get(self, "chart")

    @property
    @pulumi.getter
    def directory(self) -> Optional['outputs.ApplicationStatusOperationStateOperationSyncSourceDirectory']:
        """
        Directory holds path/directory specific options
        """
        return pulumi.get(self, "directory")

    @property
    @pulumi.getter
    def helm(self) -> Optional['outputs.ApplicationStatusOperationStateOperationSyncSourceHelm']:
        """
        Helm holds helm specific options
        """
        return pulumi.get(self, "helm")

    @property
    @pulumi.getter
    def ksonnet(self) -> Optional['outputs.ApplicationStatusOperationStateOperationSyncSourceKsonnet']:
        """
        Ksonnet holds ksonnet specific options
        """
        return pulumi.get(self, "ksonnet")

    @property
    @pulumi.getter
    def kustomize(self) -> Optional['outputs.ApplicationStatusOperationStateOperationSyncSourceKustomize']:
        """
        Kustomize holds kustomize specific options
        """
        return pulumi.get(self, "kustomize")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        """
        Path is a directory path within the Git repository, and is only valid for applications sourced from Git.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def plugin(self) -> Optional['outputs.ApplicationStatusOperationStateOperationSyncSourcePlugin']:
        """
        ConfigManagementPlugin holds config management plugin specific options
        """
        return pulumi.get(self, "plugin")

    @property
    @pulumi.getter(name="targetRevision")
    def target_revision(self) -> Optional[str]:
        """
        TargetRevision defines the revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
        """
        return pulumi.get(self, "target_revision")


@pulumi.output_type
class ApplicationStatusOperationStateOperationSyncSourceDirectory(dict):
    """
    Directory holds path/directory specific options
    """
    def __init__(__self__, *,
                 exclude: Optional[str] = None,
                 include: Optional[str] = None,
                 jsonnet: Optional['outputs.ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnet'] = None,
                 recurse: Optional[bool] = None):
        """
        Directory holds path/directory specific options
        :param str exclude: Exclude contains a glob pattern to match paths against that should be explicitly excluded from being used during manifest generation
        :param str include: Include contains a glob pattern to match paths against that should be explicitly included during manifest generation
        :param 'ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetArgs' jsonnet: Jsonnet holds options specific to Jsonnet
        :param bool recurse: Recurse specifies whether to scan a directory recursively for manifests
        """
        if exclude is not None:
            pulumi.set(__self__, "exclude", exclude)
        if include is not None:
            pulumi.set(__self__, "include", include)
        if jsonnet is not None:
            pulumi.set(__self__, "jsonnet", jsonnet)
        if recurse is not None:
            pulumi.set(__self__, "recurse", recurse)

    @property
    @pulumi.getter
    def exclude(self) -> Optional[str]:
        """
        Exclude contains a glob pattern to match paths against that should be explicitly excluded from being used during manifest generation
        """
        return pulumi.get(self, "exclude")

    @property
    @pulumi.getter
    def include(self) -> Optional[str]:
        """
        Include contains a glob pattern to match paths against that should be explicitly included during manifest generation
        """
        return pulumi.get(self, "include")

    @property
    @pulumi.getter
    def jsonnet(self) -> Optional['outputs.ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnet']:
        """
        Jsonnet holds options specific to Jsonnet
        """
        return pulumi.get(self, "jsonnet")

    @property
    @pulumi.getter
    def recurse(self) -> Optional[bool]:
        """
        Recurse specifies whether to scan a directory recursively for manifests
        """
        return pulumi.get(self, "recurse")


@pulumi.output_type
class ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnet(dict):
    """
    Jsonnet holds options specific to Jsonnet
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "extVars":
            suggest = "ext_vars"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ext_vars: Optional[Sequence['outputs.ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetExtVars']] = None,
                 libs: Optional[Sequence[str]] = None,
                 tlas: Optional[Sequence['outputs.ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetTlas']] = None):
        """
        Jsonnet holds options specific to Jsonnet
        :param Sequence['ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetExtVarsArgs'] ext_vars: ExtVars is a list of Jsonnet External Variables
        :param Sequence[str] libs: Additional library search dirs
        :param Sequence['ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetTlasArgs'] tlas: TLAS is a list of Jsonnet Top-level Arguments
        """
        if ext_vars is not None:
            pulumi.set(__self__, "ext_vars", ext_vars)
        if libs is not None:
            pulumi.set(__self__, "libs", libs)
        if tlas is not None:
            pulumi.set(__self__, "tlas", tlas)

    @property
    @pulumi.getter(name="extVars")
    def ext_vars(self) -> Optional[Sequence['outputs.ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetExtVars']]:
        """
        ExtVars is a list of Jsonnet External Variables
        """
        return pulumi.get(self, "ext_vars")

    @property
    @pulumi.getter
    def libs(self) -> Optional[Sequence[str]]:
        """
        Additional library search dirs
        """
        return pulumi.get(self, "libs")

    @property
    @pulumi.getter
    def tlas(self) -> Optional[Sequence['outputs.ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetTlas']]:
        """
        TLAS is a list of Jsonnet Top-level Arguments
        """
        return pulumi.get(self, "tlas")


@pulumi.output_type
class ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetExtVars(dict):
    """
    JsonnetVar represents a variable to be passed to jsonnet during manifest generation
    """
    def __init__(__self__, *,
                 name: str,
                 value: str,
                 code: Optional[bool] = None):
        """
        JsonnetVar represents a variable to be passed to jsonnet during manifest generation
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)
        if code is not None:
            pulumi.set(__self__, "code", code)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def code(self) -> Optional[bool]:
        return pulumi.get(self, "code")


@pulumi.output_type
class ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetTlas(dict):
    """
    JsonnetVar represents a variable to be passed to jsonnet during manifest generation
    """
    def __init__(__self__, *,
                 name: str,
                 value: str,
                 code: Optional[bool] = None):
        """
        JsonnetVar represents a variable to be passed to jsonnet during manifest generation
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)
        if code is not None:
            pulumi.set(__self__, "code", code)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def code(self) -> Optional[bool]:
        return pulumi.get(self, "code")


@pulumi.output_type
class ApplicationStatusOperationStateOperationSyncSourceHelm(dict):
    """
    Helm holds helm specific options
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fileParameters":
            suggest = "file_parameters"
        elif key == "passCredentials":
            suggest = "pass_credentials"
        elif key == "releaseName":
            suggest = "release_name"
        elif key == "valueFiles":
            suggest = "value_files"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationStatusOperationStateOperationSyncSourceHelm. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationStatusOperationStateOperationSyncSourceHelm.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationStatusOperationStateOperationSyncSourceHelm.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 file_parameters: Optional[Sequence['outputs.ApplicationStatusOperationStateOperationSyncSourceHelmFileParameters']] = None,
                 parameters: Optional[Sequence['outputs.ApplicationStatusOperationStateOperationSyncSourceHelmParameters']] = None,
                 pass_credentials: Optional[bool] = None,
                 release_name: Optional[str] = None,
                 value_files: Optional[Sequence[str]] = None,
                 values: Optional[str] = None,
                 version: Optional[str] = None):
        """
        Helm holds helm specific options
        :param Sequence['ApplicationStatusOperationStateOperationSyncSourceHelmFileParametersArgs'] file_parameters: FileParameters are file parameters to the helm template
        :param Sequence['ApplicationStatusOperationStateOperationSyncSourceHelmParametersArgs'] parameters: Parameters is a list of Helm parameters which are passed to the helm template command upon manifest generation
        :param bool pass_credentials: PassCredentials pass credentials to all domains (Helm's --pass-credentials)
        :param str release_name: ReleaseName is the Helm release name to use. If omitted it will use the application name
        :param Sequence[str] value_files: ValuesFiles is a list of Helm value files to use when generating a template
        :param str values: Values specifies Helm values to be passed to helm template, typically defined as a block
        :param str version: Version is the Helm version to use for templating (either "2" or "3")
        """
        if file_parameters is not None:
            pulumi.set(__self__, "file_parameters", file_parameters)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if pass_credentials is not None:
            pulumi.set(__self__, "pass_credentials", pass_credentials)
        if release_name is not None:
            pulumi.set(__self__, "release_name", release_name)
        if value_files is not None:
            pulumi.set(__self__, "value_files", value_files)
        if values is not None:
            pulumi.set(__self__, "values", values)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="fileParameters")
    def file_parameters(self) -> Optional[Sequence['outputs.ApplicationStatusOperationStateOperationSyncSourceHelmFileParameters']]:
        """
        FileParameters are file parameters to the helm template
        """
        return pulumi.get(self, "file_parameters")

    @property
    @pulumi.getter
    def parameters(self) -> Optional[Sequence['outputs.ApplicationStatusOperationStateOperationSyncSourceHelmParameters']]:
        """
        Parameters is a list of Helm parameters which are passed to the helm template command upon manifest generation
        """
        return pulumi.get(self, "parameters")

    @property
    @pulumi.getter(name="passCredentials")
    def pass_credentials(self) -> Optional[bool]:
        """
        PassCredentials pass credentials to all domains (Helm's --pass-credentials)
        """
        return pulumi.get(self, "pass_credentials")

    @property
    @pulumi.getter(name="releaseName")
    def release_name(self) -> Optional[str]:
        """
        ReleaseName is the Helm release name to use. If omitted it will use the application name
        """
        return pulumi.get(self, "release_name")

    @property
    @pulumi.getter(name="valueFiles")
    def value_files(self) -> Optional[Sequence[str]]:
        """
        ValuesFiles is a list of Helm value files to use when generating a template
        """
        return pulumi.get(self, "value_files")

    @property
    @pulumi.getter
    def values(self) -> Optional[str]:
        """
        Values specifies Helm values to be passed to helm template, typically defined as a block
        """
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        """
        Version is the Helm version to use for templating (either "2" or "3")
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class ApplicationStatusOperationStateOperationSyncSourceHelmFileParameters(dict):
    """
    HelmFileParameter is a file parameter that's passed to helm template during manifest generation
    """
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 path: Optional[str] = None):
        """
        HelmFileParameter is a file parameter that's passed to helm template during manifest generation
        :param str name: Name is the name of the Helm parameter
        :param str path: Path is the path to the file containing the values for the Helm parameter
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if path is not None:
            pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name is the name of the Helm parameter
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        """
        Path is the path to the file containing the values for the Helm parameter
        """
        return pulumi.get(self, "path")


@pulumi.output_type
class ApplicationStatusOperationStateOperationSyncSourceHelmParameters(dict):
    """
    HelmParameter is a parameter that's passed to helm template during manifest generation
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "forceString":
            suggest = "force_string"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationStatusOperationStateOperationSyncSourceHelmParameters. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationStatusOperationStateOperationSyncSourceHelmParameters.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationStatusOperationStateOperationSyncSourceHelmParameters.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 force_string: Optional[bool] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        HelmParameter is a parameter that's passed to helm template during manifest generation
        :param bool force_string: ForceString determines whether to tell Helm to interpret booleans and numbers as strings
        :param str name: Name is the name of the Helm parameter
        :param str value: Value is the value for the Helm parameter
        """
        if force_string is not None:
            pulumi.set(__self__, "force_string", force_string)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="forceString")
    def force_string(self) -> Optional[bool]:
        """
        ForceString determines whether to tell Helm to interpret booleans and numbers as strings
        """
        return pulumi.get(self, "force_string")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name is the name of the Helm parameter
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value is the value for the Helm parameter
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationStatusOperationStateOperationSyncSourceKsonnet(dict):
    """
    Ksonnet holds ksonnet specific options
    """
    def __init__(__self__, *,
                 environment: Optional[str] = None,
                 parameters: Optional[Sequence['outputs.ApplicationStatusOperationStateOperationSyncSourceKsonnetParameters']] = None):
        """
        Ksonnet holds ksonnet specific options
        :param str environment: Environment is a ksonnet application environment name
        :param Sequence['ApplicationStatusOperationStateOperationSyncSourceKsonnetParametersArgs'] parameters: Parameters are a list of ksonnet component parameter override values
        """
        if environment is not None:
            pulumi.set(__self__, "environment", environment)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)

    @property
    @pulumi.getter
    def environment(self) -> Optional[str]:
        """
        Environment is a ksonnet application environment name
        """
        return pulumi.get(self, "environment")

    @property
    @pulumi.getter
    def parameters(self) -> Optional[Sequence['outputs.ApplicationStatusOperationStateOperationSyncSourceKsonnetParameters']]:
        """
        Parameters are a list of ksonnet component parameter override values
        """
        return pulumi.get(self, "parameters")


@pulumi.output_type
class ApplicationStatusOperationStateOperationSyncSourceKsonnetParameters(dict):
    """
    KsonnetParameter is a ksonnet component parameter
    """
    def __init__(__self__, *,
                 name: str,
                 value: str,
                 component: Optional[str] = None):
        """
        KsonnetParameter is a ksonnet component parameter
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)
        if component is not None:
            pulumi.set(__self__, "component", component)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def component(self) -> Optional[str]:
        return pulumi.get(self, "component")


@pulumi.output_type
class ApplicationStatusOperationStateOperationSyncSourceKustomize(dict):
    """
    Kustomize holds kustomize specific options
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "commonAnnotations":
            suggest = "common_annotations"
        elif key == "commonLabels":
            suggest = "common_labels"
        elif key == "forceCommonAnnotations":
            suggest = "force_common_annotations"
        elif key == "forceCommonLabels":
            suggest = "force_common_labels"
        elif key == "namePrefix":
            suggest = "name_prefix"
        elif key == "nameSuffix":
            suggest = "name_suffix"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationStatusOperationStateOperationSyncSourceKustomize. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationStatusOperationStateOperationSyncSourceKustomize.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationStatusOperationStateOperationSyncSourceKustomize.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 common_annotations: Optional[Mapping[str, str]] = None,
                 common_labels: Optional[Mapping[str, str]] = None,
                 force_common_annotations: Optional[bool] = None,
                 force_common_labels: Optional[bool] = None,
                 images: Optional[Sequence[str]] = None,
                 name_prefix: Optional[str] = None,
                 name_suffix: Optional[str] = None,
                 version: Optional[str] = None):
        """
        Kustomize holds kustomize specific options
        :param Mapping[str, str] common_annotations: CommonAnnotations is a list of additional annotations to add to rendered manifests
        :param Mapping[str, str] common_labels: CommonLabels is a list of additional labels to add to rendered manifests
        :param bool force_common_annotations: ForceCommonAnnotations specifies whether to force applying common annotations to resources for Kustomize apps
        :param bool force_common_labels: ForceCommonLabels specifies whether to force applying common labels to resources for Kustomize apps
        :param Sequence[str] images: Images is a list of Kustomize image override specifications
        :param str name_prefix: NamePrefix is a prefix appended to resources for Kustomize apps
        :param str name_suffix: NameSuffix is a suffix appended to resources for Kustomize apps
        :param str version: Version controls which version of Kustomize to use for rendering manifests
        """
        if common_annotations is not None:
            pulumi.set(__self__, "common_annotations", common_annotations)
        if common_labels is not None:
            pulumi.set(__self__, "common_labels", common_labels)
        if force_common_annotations is not None:
            pulumi.set(__self__, "force_common_annotations", force_common_annotations)
        if force_common_labels is not None:
            pulumi.set(__self__, "force_common_labels", force_common_labels)
        if images is not None:
            pulumi.set(__self__, "images", images)
        if name_prefix is not None:
            pulumi.set(__self__, "name_prefix", name_prefix)
        if name_suffix is not None:
            pulumi.set(__self__, "name_suffix", name_suffix)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="commonAnnotations")
    def common_annotations(self) -> Optional[Mapping[str, str]]:
        """
        CommonAnnotations is a list of additional annotations to add to rendered manifests
        """
        return pulumi.get(self, "common_annotations")

    @property
    @pulumi.getter(name="commonLabels")
    def common_labels(self) -> Optional[Mapping[str, str]]:
        """
        CommonLabels is a list of additional labels to add to rendered manifests
        """
        return pulumi.get(self, "common_labels")

    @property
    @pulumi.getter(name="forceCommonAnnotations")
    def force_common_annotations(self) -> Optional[bool]:
        """
        ForceCommonAnnotations specifies whether to force applying common annotations to resources for Kustomize apps
        """
        return pulumi.get(self, "force_common_annotations")

    @property
    @pulumi.getter(name="forceCommonLabels")
    def force_common_labels(self) -> Optional[bool]:
        """
        ForceCommonLabels specifies whether to force applying common labels to resources for Kustomize apps
        """
        return pulumi.get(self, "force_common_labels")

    @property
    @pulumi.getter
    def images(self) -> Optional[Sequence[str]]:
        """
        Images is a list of Kustomize image override specifications
        """
        return pulumi.get(self, "images")

    @property
    @pulumi.getter(name="namePrefix")
    def name_prefix(self) -> Optional[str]:
        """
        NamePrefix is a prefix appended to resources for Kustomize apps
        """
        return pulumi.get(self, "name_prefix")

    @property
    @pulumi.getter(name="nameSuffix")
    def name_suffix(self) -> Optional[str]:
        """
        NameSuffix is a suffix appended to resources for Kustomize apps
        """
        return pulumi.get(self, "name_suffix")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        """
        Version controls which version of Kustomize to use for rendering manifests
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class ApplicationStatusOperationStateOperationSyncSourcePlugin(dict):
    """
    ConfigManagementPlugin holds config management plugin specific options
    """
    def __init__(__self__, *,
                 env: Optional[Sequence['outputs.ApplicationStatusOperationStateOperationSyncSourcePluginEnv']] = None,
                 name: Optional[str] = None):
        """
        ConfigManagementPlugin holds config management plugin specific options
        :param Sequence['ApplicationStatusOperationStateOperationSyncSourcePluginEnvArgs'] env: Env is a list of environment variable entries
        """
        if env is not None:
            pulumi.set(__self__, "env", env)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def env(self) -> Optional[Sequence['outputs.ApplicationStatusOperationStateOperationSyncSourcePluginEnv']]:
        """
        Env is a list of environment variable entries
        """
        return pulumi.get(self, "env")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class ApplicationStatusOperationStateOperationSyncSourcePluginEnv(dict):
    """
    EnvEntry represents an entry in the application's environment
    """
    def __init__(__self__, *,
                 name: str,
                 value: str):
        """
        EnvEntry represents an entry in the application's environment
        :param str name: Name is the name of the variable, usually expressed in uppercase
        :param str value: Value is the value of the variable
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name is the name of the variable, usually expressed in uppercase
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value is the value of the variable
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationStatusOperationStateOperationSyncSyncStrategy(dict):
    """
    SyncStrategy describes how to perform the sync
    """
    def __init__(__self__, *,
                 apply: Optional['outputs.ApplicationStatusOperationStateOperationSyncSyncStrategyApply'] = None,
                 hook: Optional['outputs.ApplicationStatusOperationStateOperationSyncSyncStrategyHook'] = None):
        """
        SyncStrategy describes how to perform the sync
        :param 'ApplicationStatusOperationStateOperationSyncSyncStrategyApplyArgs' apply: Apply will perform a `kubectl apply` to perform the sync.
        :param 'ApplicationStatusOperationStateOperationSyncSyncStrategyHookArgs' hook: Hook will submit any referenced resources to perform the sync. This is the default strategy
        """
        if apply is not None:
            pulumi.set(__self__, "apply", apply)
        if hook is not None:
            pulumi.set(__self__, "hook", hook)

    @property
    @pulumi.getter
    def apply(self) -> Optional['outputs.ApplicationStatusOperationStateOperationSyncSyncStrategyApply']:
        """
        Apply will perform a `kubectl apply` to perform the sync.
        """
        return pulumi.get(self, "apply")

    @property
    @pulumi.getter
    def hook(self) -> Optional['outputs.ApplicationStatusOperationStateOperationSyncSyncStrategyHook']:
        """
        Hook will submit any referenced resources to perform the sync. This is the default strategy
        """
        return pulumi.get(self, "hook")


@pulumi.output_type
class ApplicationStatusOperationStateOperationSyncSyncStrategyApply(dict):
    """
    Apply will perform a `kubectl apply` to perform the sync.
    """
    def __init__(__self__, *,
                 force: Optional[bool] = None):
        """
        Apply will perform a `kubectl apply` to perform the sync.
        :param bool force: Force indicates whether or not to supply the --force flag to `kubectl apply`. The --force flag deletes and re-create the resource, when PATCH encounters conflict and has retried for 5 times.
        """
        if force is not None:
            pulumi.set(__self__, "force", force)

    @property
    @pulumi.getter
    def force(self) -> Optional[bool]:
        """
        Force indicates whether or not to supply the --force flag to `kubectl apply`. The --force flag deletes and re-create the resource, when PATCH encounters conflict and has retried for 5 times.
        """
        return pulumi.get(self, "force")


@pulumi.output_type
class ApplicationStatusOperationStateOperationSyncSyncStrategyHook(dict):
    """
    Hook will submit any referenced resources to perform the sync. This is the default strategy
    """
    def __init__(__self__, *,
                 force: Optional[bool] = None):
        """
        Hook will submit any referenced resources to perform the sync. This is the default strategy
        :param bool force: Force indicates whether or not to supply the --force flag to `kubectl apply`. The --force flag deletes and re-create the resource, when PATCH encounters conflict and has retried for 5 times.
        """
        if force is not None:
            pulumi.set(__self__, "force", force)

    @property
    @pulumi.getter
    def force(self) -> Optional[bool]:
        """
        Force indicates whether or not to supply the --force flag to `kubectl apply`. The --force flag deletes and re-create the resource, when PATCH encounters conflict and has retried for 5 times.
        """
        return pulumi.get(self, "force")


@pulumi.output_type
class ApplicationStatusOperationStateSyncResult(dict):
    """
    SyncResult is the result of a Sync operation
    """
    def __init__(__self__, *,
                 revision: str,
                 resources: Optional[Sequence['outputs.ApplicationStatusOperationStateSyncResultResources']] = None,
                 source: Optional['outputs.ApplicationStatusOperationStateSyncResultSource'] = None):
        """
        SyncResult is the result of a Sync operation
        :param str revision: Revision holds the revision this sync operation was performed to
        :param Sequence['ApplicationStatusOperationStateSyncResultResourcesArgs'] resources: Resources contains a list of sync result items for each individual resource in a sync operation
        :param 'ApplicationStatusOperationStateSyncResultSourceArgs' source: Source records the application source information of the sync, used for comparing auto-sync
        """
        pulumi.set(__self__, "revision", revision)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)
        if source is not None:
            pulumi.set(__self__, "source", source)

    @property
    @pulumi.getter
    def revision(self) -> str:
        """
        Revision holds the revision this sync operation was performed to
        """
        return pulumi.get(self, "revision")

    @property
    @pulumi.getter
    def resources(self) -> Optional[Sequence['outputs.ApplicationStatusOperationStateSyncResultResources']]:
        """
        Resources contains a list of sync result items for each individual resource in a sync operation
        """
        return pulumi.get(self, "resources")

    @property
    @pulumi.getter
    def source(self) -> Optional['outputs.ApplicationStatusOperationStateSyncResultSource']:
        """
        Source records the application source information of the sync, used for comparing auto-sync
        """
        return pulumi.get(self, "source")


@pulumi.output_type
class ApplicationStatusOperationStateSyncResultResources(dict):
    """
    ResourceResult holds the operation result details of a specific resource
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "hookPhase":
            suggest = "hook_phase"
        elif key == "hookType":
            suggest = "hook_type"
        elif key == "syncPhase":
            suggest = "sync_phase"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationStatusOperationStateSyncResultResources. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationStatusOperationStateSyncResultResources.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationStatusOperationStateSyncResultResources.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 group: str,
                 kind: str,
                 name: str,
                 namespace: str,
                 version: str,
                 hook_phase: Optional[str] = None,
                 hook_type: Optional[str] = None,
                 message: Optional[str] = None,
                 status: Optional[str] = None,
                 sync_phase: Optional[str] = None):
        """
        ResourceResult holds the operation result details of a specific resource
        :param str group: Group specifies the API group of the resource
        :param str kind: Kind specifies the API kind of the resource
        :param str name: Name specifies the name of the resource
        :param str namespace: Namespace specifies the target namespace of the resource
        :param str version: Version specifies the API version of the resource
        :param str hook_phase: HookPhase contains the state of any operation associated with this resource OR hook This can also contain values for non-hook resources.
        :param str hook_type: HookType specifies the type of the hook. Empty for non-hook resources
        :param str message: Message contains an informational or error message for the last sync OR operation
        :param str status: Status holds the final result of the sync. Will be empty if the resources is yet to be applied/pruned and is always zero-value for hooks
        :param str sync_phase: SyncPhase indicates the particular phase of the sync that this result was acquired in
        """
        pulumi.set(__self__, "group", group)
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "version", version)
        if hook_phase is not None:
            pulumi.set(__self__, "hook_phase", hook_phase)
        if hook_type is not None:
            pulumi.set(__self__, "hook_type", hook_type)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if sync_phase is not None:
            pulumi.set(__self__, "sync_phase", sync_phase)

    @property
    @pulumi.getter
    def group(self) -> str:
        """
        Group specifies the API group of the resource
        """
        return pulumi.get(self, "group")

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        Kind specifies the API kind of the resource
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name specifies the name of the resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> str:
        """
        Namespace specifies the target namespace of the resource
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def version(self) -> str:
        """
        Version specifies the API version of the resource
        """
        return pulumi.get(self, "version")

    @property
    @pulumi.getter(name="hookPhase")
    def hook_phase(self) -> Optional[str]:
        """
        HookPhase contains the state of any operation associated with this resource OR hook This can also contain values for non-hook resources.
        """
        return pulumi.get(self, "hook_phase")

    @property
    @pulumi.getter(name="hookType")
    def hook_type(self) -> Optional[str]:
        """
        HookType specifies the type of the hook. Empty for non-hook resources
        """
        return pulumi.get(self, "hook_type")

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        """
        Message contains an informational or error message for the last sync OR operation
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        Status holds the final result of the sync. Will be empty if the resources is yet to be applied/pruned and is always zero-value for hooks
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="syncPhase")
    def sync_phase(self) -> Optional[str]:
        """
        SyncPhase indicates the particular phase of the sync that this result was acquired in
        """
        return pulumi.get(self, "sync_phase")


@pulumi.output_type
class ApplicationStatusOperationStateSyncResultSource(dict):
    """
    Source records the application source information of the sync, used for comparing auto-sync
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "repoURL":
            suggest = "repo_url"
        elif key == "targetRevision":
            suggest = "target_revision"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationStatusOperationStateSyncResultSource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationStatusOperationStateSyncResultSource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationStatusOperationStateSyncResultSource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 repo_url: str,
                 chart: Optional[str] = None,
                 directory: Optional['outputs.ApplicationStatusOperationStateSyncResultSourceDirectory'] = None,
                 helm: Optional['outputs.ApplicationStatusOperationStateSyncResultSourceHelm'] = None,
                 ksonnet: Optional['outputs.ApplicationStatusOperationStateSyncResultSourceKsonnet'] = None,
                 kustomize: Optional['outputs.ApplicationStatusOperationStateSyncResultSourceKustomize'] = None,
                 path: Optional[str] = None,
                 plugin: Optional['outputs.ApplicationStatusOperationStateSyncResultSourcePlugin'] = None,
                 target_revision: Optional[str] = None):
        """
        Source records the application source information of the sync, used for comparing auto-sync
        :param str repo_url: RepoURL is the URL to the repository (Git or Helm) that contains the application manifests
        :param str chart: Chart is a Helm chart name, and must be specified for applications sourced from a Helm repo.
        :param 'ApplicationStatusOperationStateSyncResultSourceDirectoryArgs' directory: Directory holds path/directory specific options
        :param 'ApplicationStatusOperationStateSyncResultSourceHelmArgs' helm: Helm holds helm specific options
        :param 'ApplicationStatusOperationStateSyncResultSourceKsonnetArgs' ksonnet: Ksonnet holds ksonnet specific options
        :param 'ApplicationStatusOperationStateSyncResultSourceKustomizeArgs' kustomize: Kustomize holds kustomize specific options
        :param str path: Path is a directory path within the Git repository, and is only valid for applications sourced from Git.
        :param 'ApplicationStatusOperationStateSyncResultSourcePluginArgs' plugin: ConfigManagementPlugin holds config management plugin specific options
        :param str target_revision: TargetRevision defines the revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
        """
        pulumi.set(__self__, "repo_url", repo_url)
        if chart is not None:
            pulumi.set(__self__, "chart", chart)
        if directory is not None:
            pulumi.set(__self__, "directory", directory)
        if helm is not None:
            pulumi.set(__self__, "helm", helm)
        if ksonnet is not None:
            pulumi.set(__self__, "ksonnet", ksonnet)
        if kustomize is not None:
            pulumi.set(__self__, "kustomize", kustomize)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if plugin is not None:
            pulumi.set(__self__, "plugin", plugin)
        if target_revision is not None:
            pulumi.set(__self__, "target_revision", target_revision)

    @property
    @pulumi.getter(name="repoURL")
    def repo_url(self) -> str:
        """
        RepoURL is the URL to the repository (Git or Helm) that contains the application manifests
        """
        return pulumi.get(self, "repo_url")

    @property
    @pulumi.getter
    def chart(self) -> Optional[str]:
        """
        Chart is a Helm chart name, and must be specified for applications sourced from a Helm repo.
        """
        return pulumi.get(self, "chart")

    @property
    @pulumi.getter
    def directory(self) -> Optional['outputs.ApplicationStatusOperationStateSyncResultSourceDirectory']:
        """
        Directory holds path/directory specific options
        """
        return pulumi.get(self, "directory")

    @property
    @pulumi.getter
    def helm(self) -> Optional['outputs.ApplicationStatusOperationStateSyncResultSourceHelm']:
        """
        Helm holds helm specific options
        """
        return pulumi.get(self, "helm")

    @property
    @pulumi.getter
    def ksonnet(self) -> Optional['outputs.ApplicationStatusOperationStateSyncResultSourceKsonnet']:
        """
        Ksonnet holds ksonnet specific options
        """
        return pulumi.get(self, "ksonnet")

    @property
    @pulumi.getter
    def kustomize(self) -> Optional['outputs.ApplicationStatusOperationStateSyncResultSourceKustomize']:
        """
        Kustomize holds kustomize specific options
        """
        return pulumi.get(self, "kustomize")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        """
        Path is a directory path within the Git repository, and is only valid for applications sourced from Git.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def plugin(self) -> Optional['outputs.ApplicationStatusOperationStateSyncResultSourcePlugin']:
        """
        ConfigManagementPlugin holds config management plugin specific options
        """
        return pulumi.get(self, "plugin")

    @property
    @pulumi.getter(name="targetRevision")
    def target_revision(self) -> Optional[str]:
        """
        TargetRevision defines the revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
        """
        return pulumi.get(self, "target_revision")


@pulumi.output_type
class ApplicationStatusOperationStateSyncResultSourceDirectory(dict):
    """
    Directory holds path/directory specific options
    """
    def __init__(__self__, *,
                 exclude: Optional[str] = None,
                 include: Optional[str] = None,
                 jsonnet: Optional['outputs.ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnet'] = None,
                 recurse: Optional[bool] = None):
        """
        Directory holds path/directory specific options
        :param str exclude: Exclude contains a glob pattern to match paths against that should be explicitly excluded from being used during manifest generation
        :param str include: Include contains a glob pattern to match paths against that should be explicitly included during manifest generation
        :param 'ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetArgs' jsonnet: Jsonnet holds options specific to Jsonnet
        :param bool recurse: Recurse specifies whether to scan a directory recursively for manifests
        """
        if exclude is not None:
            pulumi.set(__self__, "exclude", exclude)
        if include is not None:
            pulumi.set(__self__, "include", include)
        if jsonnet is not None:
            pulumi.set(__self__, "jsonnet", jsonnet)
        if recurse is not None:
            pulumi.set(__self__, "recurse", recurse)

    @property
    @pulumi.getter
    def exclude(self) -> Optional[str]:
        """
        Exclude contains a glob pattern to match paths against that should be explicitly excluded from being used during manifest generation
        """
        return pulumi.get(self, "exclude")

    @property
    @pulumi.getter
    def include(self) -> Optional[str]:
        """
        Include contains a glob pattern to match paths against that should be explicitly included during manifest generation
        """
        return pulumi.get(self, "include")

    @property
    @pulumi.getter
    def jsonnet(self) -> Optional['outputs.ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnet']:
        """
        Jsonnet holds options specific to Jsonnet
        """
        return pulumi.get(self, "jsonnet")

    @property
    @pulumi.getter
    def recurse(self) -> Optional[bool]:
        """
        Recurse specifies whether to scan a directory recursively for manifests
        """
        return pulumi.get(self, "recurse")


@pulumi.output_type
class ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnet(dict):
    """
    Jsonnet holds options specific to Jsonnet
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "extVars":
            suggest = "ext_vars"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ext_vars: Optional[Sequence['outputs.ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetExtVars']] = None,
                 libs: Optional[Sequence[str]] = None,
                 tlas: Optional[Sequence['outputs.ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetTlas']] = None):
        """
        Jsonnet holds options specific to Jsonnet
        :param Sequence['ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetExtVarsArgs'] ext_vars: ExtVars is a list of Jsonnet External Variables
        :param Sequence[str] libs: Additional library search dirs
        :param Sequence['ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetTlasArgs'] tlas: TLAS is a list of Jsonnet Top-level Arguments
        """
        if ext_vars is not None:
            pulumi.set(__self__, "ext_vars", ext_vars)
        if libs is not None:
            pulumi.set(__self__, "libs", libs)
        if tlas is not None:
            pulumi.set(__self__, "tlas", tlas)

    @property
    @pulumi.getter(name="extVars")
    def ext_vars(self) -> Optional[Sequence['outputs.ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetExtVars']]:
        """
        ExtVars is a list of Jsonnet External Variables
        """
        return pulumi.get(self, "ext_vars")

    @property
    @pulumi.getter
    def libs(self) -> Optional[Sequence[str]]:
        """
        Additional library search dirs
        """
        return pulumi.get(self, "libs")

    @property
    @pulumi.getter
    def tlas(self) -> Optional[Sequence['outputs.ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetTlas']]:
        """
        TLAS is a list of Jsonnet Top-level Arguments
        """
        return pulumi.get(self, "tlas")


@pulumi.output_type
class ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetExtVars(dict):
    """
    JsonnetVar represents a variable to be passed to jsonnet during manifest generation
    """
    def __init__(__self__, *,
                 name: str,
                 value: str,
                 code: Optional[bool] = None):
        """
        JsonnetVar represents a variable to be passed to jsonnet during manifest generation
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)
        if code is not None:
            pulumi.set(__self__, "code", code)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def code(self) -> Optional[bool]:
        return pulumi.get(self, "code")


@pulumi.output_type
class ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetTlas(dict):
    """
    JsonnetVar represents a variable to be passed to jsonnet during manifest generation
    """
    def __init__(__self__, *,
                 name: str,
                 value: str,
                 code: Optional[bool] = None):
        """
        JsonnetVar represents a variable to be passed to jsonnet during manifest generation
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)
        if code is not None:
            pulumi.set(__self__, "code", code)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def code(self) -> Optional[bool]:
        return pulumi.get(self, "code")


@pulumi.output_type
class ApplicationStatusOperationStateSyncResultSourceHelm(dict):
    """
    Helm holds helm specific options
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fileParameters":
            suggest = "file_parameters"
        elif key == "passCredentials":
            suggest = "pass_credentials"
        elif key == "releaseName":
            suggest = "release_name"
        elif key == "valueFiles":
            suggest = "value_files"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationStatusOperationStateSyncResultSourceHelm. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationStatusOperationStateSyncResultSourceHelm.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationStatusOperationStateSyncResultSourceHelm.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 file_parameters: Optional[Sequence['outputs.ApplicationStatusOperationStateSyncResultSourceHelmFileParameters']] = None,
                 parameters: Optional[Sequence['outputs.ApplicationStatusOperationStateSyncResultSourceHelmParameters']] = None,
                 pass_credentials: Optional[bool] = None,
                 release_name: Optional[str] = None,
                 value_files: Optional[Sequence[str]] = None,
                 values: Optional[str] = None,
                 version: Optional[str] = None):
        """
        Helm holds helm specific options
        :param Sequence['ApplicationStatusOperationStateSyncResultSourceHelmFileParametersArgs'] file_parameters: FileParameters are file parameters to the helm template
        :param Sequence['ApplicationStatusOperationStateSyncResultSourceHelmParametersArgs'] parameters: Parameters is a list of Helm parameters which are passed to the helm template command upon manifest generation
        :param bool pass_credentials: PassCredentials pass credentials to all domains (Helm's --pass-credentials)
        :param str release_name: ReleaseName is the Helm release name to use. If omitted it will use the application name
        :param Sequence[str] value_files: ValuesFiles is a list of Helm value files to use when generating a template
        :param str values: Values specifies Helm values to be passed to helm template, typically defined as a block
        :param str version: Version is the Helm version to use for templating (either "2" or "3")
        """
        if file_parameters is not None:
            pulumi.set(__self__, "file_parameters", file_parameters)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if pass_credentials is not None:
            pulumi.set(__self__, "pass_credentials", pass_credentials)
        if release_name is not None:
            pulumi.set(__self__, "release_name", release_name)
        if value_files is not None:
            pulumi.set(__self__, "value_files", value_files)
        if values is not None:
            pulumi.set(__self__, "values", values)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="fileParameters")
    def file_parameters(self) -> Optional[Sequence['outputs.ApplicationStatusOperationStateSyncResultSourceHelmFileParameters']]:
        """
        FileParameters are file parameters to the helm template
        """
        return pulumi.get(self, "file_parameters")

    @property
    @pulumi.getter
    def parameters(self) -> Optional[Sequence['outputs.ApplicationStatusOperationStateSyncResultSourceHelmParameters']]:
        """
        Parameters is a list of Helm parameters which are passed to the helm template command upon manifest generation
        """
        return pulumi.get(self, "parameters")

    @property
    @pulumi.getter(name="passCredentials")
    def pass_credentials(self) -> Optional[bool]:
        """
        PassCredentials pass credentials to all domains (Helm's --pass-credentials)
        """
        return pulumi.get(self, "pass_credentials")

    @property
    @pulumi.getter(name="releaseName")
    def release_name(self) -> Optional[str]:
        """
        ReleaseName is the Helm release name to use. If omitted it will use the application name
        """
        return pulumi.get(self, "release_name")

    @property
    @pulumi.getter(name="valueFiles")
    def value_files(self) -> Optional[Sequence[str]]:
        """
        ValuesFiles is a list of Helm value files to use when generating a template
        """
        return pulumi.get(self, "value_files")

    @property
    @pulumi.getter
    def values(self) -> Optional[str]:
        """
        Values specifies Helm values to be passed to helm template, typically defined as a block
        """
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        """
        Version is the Helm version to use for templating (either "2" or "3")
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class ApplicationStatusOperationStateSyncResultSourceHelmFileParameters(dict):
    """
    HelmFileParameter is a file parameter that's passed to helm template during manifest generation
    """
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 path: Optional[str] = None):
        """
        HelmFileParameter is a file parameter that's passed to helm template during manifest generation
        :param str name: Name is the name of the Helm parameter
        :param str path: Path is the path to the file containing the values for the Helm parameter
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if path is not None:
            pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name is the name of the Helm parameter
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        """
        Path is the path to the file containing the values for the Helm parameter
        """
        return pulumi.get(self, "path")


@pulumi.output_type
class ApplicationStatusOperationStateSyncResultSourceHelmParameters(dict):
    """
    HelmParameter is a parameter that's passed to helm template during manifest generation
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "forceString":
            suggest = "force_string"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationStatusOperationStateSyncResultSourceHelmParameters. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationStatusOperationStateSyncResultSourceHelmParameters.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationStatusOperationStateSyncResultSourceHelmParameters.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 force_string: Optional[bool] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        HelmParameter is a parameter that's passed to helm template during manifest generation
        :param bool force_string: ForceString determines whether to tell Helm to interpret booleans and numbers as strings
        :param str name: Name is the name of the Helm parameter
        :param str value: Value is the value for the Helm parameter
        """
        if force_string is not None:
            pulumi.set(__self__, "force_string", force_string)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="forceString")
    def force_string(self) -> Optional[bool]:
        """
        ForceString determines whether to tell Helm to interpret booleans and numbers as strings
        """
        return pulumi.get(self, "force_string")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name is the name of the Helm parameter
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value is the value for the Helm parameter
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationStatusOperationStateSyncResultSourceKsonnet(dict):
    """
    Ksonnet holds ksonnet specific options
    """
    def __init__(__self__, *,
                 environment: Optional[str] = None,
                 parameters: Optional[Sequence['outputs.ApplicationStatusOperationStateSyncResultSourceKsonnetParameters']] = None):
        """
        Ksonnet holds ksonnet specific options
        :param str environment: Environment is a ksonnet application environment name
        :param Sequence['ApplicationStatusOperationStateSyncResultSourceKsonnetParametersArgs'] parameters: Parameters are a list of ksonnet component parameter override values
        """
        if environment is not None:
            pulumi.set(__self__, "environment", environment)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)

    @property
    @pulumi.getter
    def environment(self) -> Optional[str]:
        """
        Environment is a ksonnet application environment name
        """
        return pulumi.get(self, "environment")

    @property
    @pulumi.getter
    def parameters(self) -> Optional[Sequence['outputs.ApplicationStatusOperationStateSyncResultSourceKsonnetParameters']]:
        """
        Parameters are a list of ksonnet component parameter override values
        """
        return pulumi.get(self, "parameters")


@pulumi.output_type
class ApplicationStatusOperationStateSyncResultSourceKsonnetParameters(dict):
    """
    KsonnetParameter is a ksonnet component parameter
    """
    def __init__(__self__, *,
                 name: str,
                 value: str,
                 component: Optional[str] = None):
        """
        KsonnetParameter is a ksonnet component parameter
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)
        if component is not None:
            pulumi.set(__self__, "component", component)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def component(self) -> Optional[str]:
        return pulumi.get(self, "component")


@pulumi.output_type
class ApplicationStatusOperationStateSyncResultSourceKustomize(dict):
    """
    Kustomize holds kustomize specific options
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "commonAnnotations":
            suggest = "common_annotations"
        elif key == "commonLabels":
            suggest = "common_labels"
        elif key == "forceCommonAnnotations":
            suggest = "force_common_annotations"
        elif key == "forceCommonLabels":
            suggest = "force_common_labels"
        elif key == "namePrefix":
            suggest = "name_prefix"
        elif key == "nameSuffix":
            suggest = "name_suffix"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationStatusOperationStateSyncResultSourceKustomize. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationStatusOperationStateSyncResultSourceKustomize.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationStatusOperationStateSyncResultSourceKustomize.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 common_annotations: Optional[Mapping[str, str]] = None,
                 common_labels: Optional[Mapping[str, str]] = None,
                 force_common_annotations: Optional[bool] = None,
                 force_common_labels: Optional[bool] = None,
                 images: Optional[Sequence[str]] = None,
                 name_prefix: Optional[str] = None,
                 name_suffix: Optional[str] = None,
                 version: Optional[str] = None):
        """
        Kustomize holds kustomize specific options
        :param Mapping[str, str] common_annotations: CommonAnnotations is a list of additional annotations to add to rendered manifests
        :param Mapping[str, str] common_labels: CommonLabels is a list of additional labels to add to rendered manifests
        :param bool force_common_annotations: ForceCommonAnnotations specifies whether to force applying common annotations to resources for Kustomize apps
        :param bool force_common_labels: ForceCommonLabels specifies whether to force applying common labels to resources for Kustomize apps
        :param Sequence[str] images: Images is a list of Kustomize image override specifications
        :param str name_prefix: NamePrefix is a prefix appended to resources for Kustomize apps
        :param str name_suffix: NameSuffix is a suffix appended to resources for Kustomize apps
        :param str version: Version controls which version of Kustomize to use for rendering manifests
        """
        if common_annotations is not None:
            pulumi.set(__self__, "common_annotations", common_annotations)
        if common_labels is not None:
            pulumi.set(__self__, "common_labels", common_labels)
        if force_common_annotations is not None:
            pulumi.set(__self__, "force_common_annotations", force_common_annotations)
        if force_common_labels is not None:
            pulumi.set(__self__, "force_common_labels", force_common_labels)
        if images is not None:
            pulumi.set(__self__, "images", images)
        if name_prefix is not None:
            pulumi.set(__self__, "name_prefix", name_prefix)
        if name_suffix is not None:
            pulumi.set(__self__, "name_suffix", name_suffix)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="commonAnnotations")
    def common_annotations(self) -> Optional[Mapping[str, str]]:
        """
        CommonAnnotations is a list of additional annotations to add to rendered manifests
        """
        return pulumi.get(self, "common_annotations")

    @property
    @pulumi.getter(name="commonLabels")
    def common_labels(self) -> Optional[Mapping[str, str]]:
        """
        CommonLabels is a list of additional labels to add to rendered manifests
        """
        return pulumi.get(self, "common_labels")

    @property
    @pulumi.getter(name="forceCommonAnnotations")
    def force_common_annotations(self) -> Optional[bool]:
        """
        ForceCommonAnnotations specifies whether to force applying common annotations to resources for Kustomize apps
        """
        return pulumi.get(self, "force_common_annotations")

    @property
    @pulumi.getter(name="forceCommonLabels")
    def force_common_labels(self) -> Optional[bool]:
        """
        ForceCommonLabels specifies whether to force applying common labels to resources for Kustomize apps
        """
        return pulumi.get(self, "force_common_labels")

    @property
    @pulumi.getter
    def images(self) -> Optional[Sequence[str]]:
        """
        Images is a list of Kustomize image override specifications
        """
        return pulumi.get(self, "images")

    @property
    @pulumi.getter(name="namePrefix")
    def name_prefix(self) -> Optional[str]:
        """
        NamePrefix is a prefix appended to resources for Kustomize apps
        """
        return pulumi.get(self, "name_prefix")

    @property
    @pulumi.getter(name="nameSuffix")
    def name_suffix(self) -> Optional[str]:
        """
        NameSuffix is a suffix appended to resources for Kustomize apps
        """
        return pulumi.get(self, "name_suffix")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        """
        Version controls which version of Kustomize to use for rendering manifests
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class ApplicationStatusOperationStateSyncResultSourcePlugin(dict):
    """
    ConfigManagementPlugin holds config management plugin specific options
    """
    def __init__(__self__, *,
                 env: Optional[Sequence['outputs.ApplicationStatusOperationStateSyncResultSourcePluginEnv']] = None,
                 name: Optional[str] = None):
        """
        ConfigManagementPlugin holds config management plugin specific options
        :param Sequence['ApplicationStatusOperationStateSyncResultSourcePluginEnvArgs'] env: Env is a list of environment variable entries
        """
        if env is not None:
            pulumi.set(__self__, "env", env)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def env(self) -> Optional[Sequence['outputs.ApplicationStatusOperationStateSyncResultSourcePluginEnv']]:
        """
        Env is a list of environment variable entries
        """
        return pulumi.get(self, "env")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class ApplicationStatusOperationStateSyncResultSourcePluginEnv(dict):
    """
    EnvEntry represents an entry in the application's environment
    """
    def __init__(__self__, *,
                 name: str,
                 value: str):
        """
        EnvEntry represents an entry in the application's environment
        :param str name: Name is the name of the variable, usually expressed in uppercase
        :param str value: Value is the value of the variable
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name is the name of the variable, usually expressed in uppercase
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value is the value of the variable
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationStatusResources(dict):
    """
    ResourceStatus holds the current sync and health status of a resource TODO: describe members of this type
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "requiresPruning":
            suggest = "requires_pruning"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationStatusResources. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationStatusResources.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationStatusResources.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 group: Optional[str] = None,
                 health: Optional['outputs.ApplicationStatusResourcesHealth'] = None,
                 hook: Optional[bool] = None,
                 kind: Optional[str] = None,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None,
                 requires_pruning: Optional[bool] = None,
                 status: Optional[str] = None,
                 version: Optional[str] = None):
        """
        ResourceStatus holds the current sync and health status of a resource TODO: describe members of this type
        :param 'ApplicationStatusResourcesHealthArgs' health: HealthStatus contains information about the currently observed health state of an application or resource
        :param str status: SyncStatusCode is a type which represents possible comparison results
        """
        if group is not None:
            pulumi.set(__self__, "group", group)
        if health is not None:
            pulumi.set(__self__, "health", health)
        if hook is not None:
            pulumi.set(__self__, "hook", hook)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if requires_pruning is not None:
            pulumi.set(__self__, "requires_pruning", requires_pruning)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def group(self) -> Optional[str]:
        return pulumi.get(self, "group")

    @property
    @pulumi.getter
    def health(self) -> Optional['outputs.ApplicationStatusResourcesHealth']:
        """
        HealthStatus contains information about the currently observed health state of an application or resource
        """
        return pulumi.get(self, "health")

    @property
    @pulumi.getter
    def hook(self) -> Optional[bool]:
        return pulumi.get(self, "hook")

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter(name="requiresPruning")
    def requires_pruning(self) -> Optional[bool]:
        return pulumi.get(self, "requires_pruning")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        SyncStatusCode is a type which represents possible comparison results
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class ApplicationStatusResourcesHealth(dict):
    """
    HealthStatus contains information about the currently observed health state of an application or resource
    """
    def __init__(__self__, *,
                 message: Optional[str] = None,
                 status: Optional[str] = None):
        """
        HealthStatus contains information about the currently observed health state of an application or resource
        :param str message: Message is a human-readable informational message describing the health status
        :param str status: Status holds the status code of the application or resource
        """
        if message is not None:
            pulumi.set(__self__, "message", message)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        """
        Message is a human-readable informational message describing the health status
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        Status holds the status code of the application or resource
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class ApplicationStatusSummary(dict):
    """
    Summary contains a list of URLs and container images used by this application
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "externalURLs":
            suggest = "external_urls"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationStatusSummary. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationStatusSummary.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationStatusSummary.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 external_urls: Optional[Sequence[str]] = None,
                 images: Optional[Sequence[str]] = None):
        """
        Summary contains a list of URLs and container images used by this application
        :param Sequence[str] external_urls: ExternalURLs holds all external URLs of application child resources.
        :param Sequence[str] images: Images holds all images of application child resources.
        """
        if external_urls is not None:
            pulumi.set(__self__, "external_urls", external_urls)
        if images is not None:
            pulumi.set(__self__, "images", images)

    @property
    @pulumi.getter(name="externalURLs")
    def external_urls(self) -> Optional[Sequence[str]]:
        """
        ExternalURLs holds all external URLs of application child resources.
        """
        return pulumi.get(self, "external_urls")

    @property
    @pulumi.getter
    def images(self) -> Optional[Sequence[str]]:
        """
        Images holds all images of application child resources.
        """
        return pulumi.get(self, "images")


@pulumi.output_type
class ApplicationStatusSync(dict):
    """
    Sync contains information about the application's current sync status
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "comparedTo":
            suggest = "compared_to"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationStatusSync. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationStatusSync.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationStatusSync.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 status: str,
                 compared_to: Optional['outputs.ApplicationStatusSyncComparedTo'] = None,
                 revision: Optional[str] = None):
        """
        Sync contains information about the application's current sync status
        :param str status: Status is the sync state of the comparison
        :param 'ApplicationStatusSyncComparedToArgs' compared_to: ComparedTo contains information about what has been compared
        :param str revision: Revision contains information about the revision the comparison has been performed to
        """
        pulumi.set(__self__, "status", status)
        if compared_to is not None:
            pulumi.set(__self__, "compared_to", compared_to)
        if revision is not None:
            pulumi.set(__self__, "revision", revision)

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Status is the sync state of the comparison
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="comparedTo")
    def compared_to(self) -> Optional['outputs.ApplicationStatusSyncComparedTo']:
        """
        ComparedTo contains information about what has been compared
        """
        return pulumi.get(self, "compared_to")

    @property
    @pulumi.getter
    def revision(self) -> Optional[str]:
        """
        Revision contains information about the revision the comparison has been performed to
        """
        return pulumi.get(self, "revision")


@pulumi.output_type
class ApplicationStatusSyncComparedTo(dict):
    """
    ComparedTo contains information about what has been compared
    """
    def __init__(__self__, *,
                 destination: 'outputs.ApplicationStatusSyncComparedToDestination',
                 source: 'outputs.ApplicationStatusSyncComparedToSource'):
        """
        ComparedTo contains information about what has been compared
        :param 'ApplicationStatusSyncComparedToDestinationArgs' destination: Destination is a reference to the application's destination used for comparison
        :param 'ApplicationStatusSyncComparedToSourceArgs' source: Source is a reference to the application's source used for comparison
        """
        pulumi.set(__self__, "destination", destination)
        pulumi.set(__self__, "source", source)

    @property
    @pulumi.getter
    def destination(self) -> 'outputs.ApplicationStatusSyncComparedToDestination':
        """
        Destination is a reference to the application's destination used for comparison
        """
        return pulumi.get(self, "destination")

    @property
    @pulumi.getter
    def source(self) -> 'outputs.ApplicationStatusSyncComparedToSource':
        """
        Source is a reference to the application's source used for comparison
        """
        return pulumi.get(self, "source")


@pulumi.output_type
class ApplicationStatusSyncComparedToDestination(dict):
    """
    Destination is a reference to the application's destination used for comparison
    """
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None,
                 server: Optional[str] = None):
        """
        Destination is a reference to the application's destination used for comparison
        :param str name: Name is an alternate way of specifying the target cluster by its symbolic name
        :param str namespace: Namespace specifies the target namespace for the application's resources. The namespace will only be set for namespace-scoped resources that have not set a value for .metadata.namespace
        :param str server: Server specifies the URL of the target cluster and must be set to the Kubernetes control plane API
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if server is not None:
            pulumi.set(__self__, "server", server)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name is an alternate way of specifying the target cluster by its symbolic name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace specifies the target namespace for the application's resources. The namespace will only be set for namespace-scoped resources that have not set a value for .metadata.namespace
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def server(self) -> Optional[str]:
        """
        Server specifies the URL of the target cluster and must be set to the Kubernetes control plane API
        """
        return pulumi.get(self, "server")


@pulumi.output_type
class ApplicationStatusSyncComparedToSource(dict):
    """
    Source is a reference to the application's source used for comparison
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "repoURL":
            suggest = "repo_url"
        elif key == "targetRevision":
            suggest = "target_revision"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationStatusSyncComparedToSource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationStatusSyncComparedToSource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationStatusSyncComparedToSource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 repo_url: str,
                 chart: Optional[str] = None,
                 directory: Optional['outputs.ApplicationStatusSyncComparedToSourceDirectory'] = None,
                 helm: Optional['outputs.ApplicationStatusSyncComparedToSourceHelm'] = None,
                 ksonnet: Optional['outputs.ApplicationStatusSyncComparedToSourceKsonnet'] = None,
                 kustomize: Optional['outputs.ApplicationStatusSyncComparedToSourceKustomize'] = None,
                 path: Optional[str] = None,
                 plugin: Optional['outputs.ApplicationStatusSyncComparedToSourcePlugin'] = None,
                 target_revision: Optional[str] = None):
        """
        Source is a reference to the application's source used for comparison
        :param str repo_url: RepoURL is the URL to the repository (Git or Helm) that contains the application manifests
        :param str chart: Chart is a Helm chart name, and must be specified for applications sourced from a Helm repo.
        :param 'ApplicationStatusSyncComparedToSourceDirectoryArgs' directory: Directory holds path/directory specific options
        :param 'ApplicationStatusSyncComparedToSourceHelmArgs' helm: Helm holds helm specific options
        :param 'ApplicationStatusSyncComparedToSourceKsonnetArgs' ksonnet: Ksonnet holds ksonnet specific options
        :param 'ApplicationStatusSyncComparedToSourceKustomizeArgs' kustomize: Kustomize holds kustomize specific options
        :param str path: Path is a directory path within the Git repository, and is only valid for applications sourced from Git.
        :param 'ApplicationStatusSyncComparedToSourcePluginArgs' plugin: ConfigManagementPlugin holds config management plugin specific options
        :param str target_revision: TargetRevision defines the revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
        """
        pulumi.set(__self__, "repo_url", repo_url)
        if chart is not None:
            pulumi.set(__self__, "chart", chart)
        if directory is not None:
            pulumi.set(__self__, "directory", directory)
        if helm is not None:
            pulumi.set(__self__, "helm", helm)
        if ksonnet is not None:
            pulumi.set(__self__, "ksonnet", ksonnet)
        if kustomize is not None:
            pulumi.set(__self__, "kustomize", kustomize)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if plugin is not None:
            pulumi.set(__self__, "plugin", plugin)
        if target_revision is not None:
            pulumi.set(__self__, "target_revision", target_revision)

    @property
    @pulumi.getter(name="repoURL")
    def repo_url(self) -> str:
        """
        RepoURL is the URL to the repository (Git or Helm) that contains the application manifests
        """
        return pulumi.get(self, "repo_url")

    @property
    @pulumi.getter
    def chart(self) -> Optional[str]:
        """
        Chart is a Helm chart name, and must be specified for applications sourced from a Helm repo.
        """
        return pulumi.get(self, "chart")

    @property
    @pulumi.getter
    def directory(self) -> Optional['outputs.ApplicationStatusSyncComparedToSourceDirectory']:
        """
        Directory holds path/directory specific options
        """
        return pulumi.get(self, "directory")

    @property
    @pulumi.getter
    def helm(self) -> Optional['outputs.ApplicationStatusSyncComparedToSourceHelm']:
        """
        Helm holds helm specific options
        """
        return pulumi.get(self, "helm")

    @property
    @pulumi.getter
    def ksonnet(self) -> Optional['outputs.ApplicationStatusSyncComparedToSourceKsonnet']:
        """
        Ksonnet holds ksonnet specific options
        """
        return pulumi.get(self, "ksonnet")

    @property
    @pulumi.getter
    def kustomize(self) -> Optional['outputs.ApplicationStatusSyncComparedToSourceKustomize']:
        """
        Kustomize holds kustomize specific options
        """
        return pulumi.get(self, "kustomize")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        """
        Path is a directory path within the Git repository, and is only valid for applications sourced from Git.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def plugin(self) -> Optional['outputs.ApplicationStatusSyncComparedToSourcePlugin']:
        """
        ConfigManagementPlugin holds config management plugin specific options
        """
        return pulumi.get(self, "plugin")

    @property
    @pulumi.getter(name="targetRevision")
    def target_revision(self) -> Optional[str]:
        """
        TargetRevision defines the revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
        """
        return pulumi.get(self, "target_revision")


@pulumi.output_type
class ApplicationStatusSyncComparedToSourceDirectory(dict):
    """
    Directory holds path/directory specific options
    """
    def __init__(__self__, *,
                 exclude: Optional[str] = None,
                 include: Optional[str] = None,
                 jsonnet: Optional['outputs.ApplicationStatusSyncComparedToSourceDirectoryJsonnet'] = None,
                 recurse: Optional[bool] = None):
        """
        Directory holds path/directory specific options
        :param str exclude: Exclude contains a glob pattern to match paths against that should be explicitly excluded from being used during manifest generation
        :param str include: Include contains a glob pattern to match paths against that should be explicitly included during manifest generation
        :param 'ApplicationStatusSyncComparedToSourceDirectoryJsonnetArgs' jsonnet: Jsonnet holds options specific to Jsonnet
        :param bool recurse: Recurse specifies whether to scan a directory recursively for manifests
        """
        if exclude is not None:
            pulumi.set(__self__, "exclude", exclude)
        if include is not None:
            pulumi.set(__self__, "include", include)
        if jsonnet is not None:
            pulumi.set(__self__, "jsonnet", jsonnet)
        if recurse is not None:
            pulumi.set(__self__, "recurse", recurse)

    @property
    @pulumi.getter
    def exclude(self) -> Optional[str]:
        """
        Exclude contains a glob pattern to match paths against that should be explicitly excluded from being used during manifest generation
        """
        return pulumi.get(self, "exclude")

    @property
    @pulumi.getter
    def include(self) -> Optional[str]:
        """
        Include contains a glob pattern to match paths against that should be explicitly included during manifest generation
        """
        return pulumi.get(self, "include")

    @property
    @pulumi.getter
    def jsonnet(self) -> Optional['outputs.ApplicationStatusSyncComparedToSourceDirectoryJsonnet']:
        """
        Jsonnet holds options specific to Jsonnet
        """
        return pulumi.get(self, "jsonnet")

    @property
    @pulumi.getter
    def recurse(self) -> Optional[bool]:
        """
        Recurse specifies whether to scan a directory recursively for manifests
        """
        return pulumi.get(self, "recurse")


@pulumi.output_type
class ApplicationStatusSyncComparedToSourceDirectoryJsonnet(dict):
    """
    Jsonnet holds options specific to Jsonnet
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "extVars":
            suggest = "ext_vars"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationStatusSyncComparedToSourceDirectoryJsonnet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationStatusSyncComparedToSourceDirectoryJsonnet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationStatusSyncComparedToSourceDirectoryJsonnet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ext_vars: Optional[Sequence['outputs.ApplicationStatusSyncComparedToSourceDirectoryJsonnetExtVars']] = None,
                 libs: Optional[Sequence[str]] = None,
                 tlas: Optional[Sequence['outputs.ApplicationStatusSyncComparedToSourceDirectoryJsonnetTlas']] = None):
        """
        Jsonnet holds options specific to Jsonnet
        :param Sequence['ApplicationStatusSyncComparedToSourceDirectoryJsonnetExtVarsArgs'] ext_vars: ExtVars is a list of Jsonnet External Variables
        :param Sequence[str] libs: Additional library search dirs
        :param Sequence['ApplicationStatusSyncComparedToSourceDirectoryJsonnetTlasArgs'] tlas: TLAS is a list of Jsonnet Top-level Arguments
        """
        if ext_vars is not None:
            pulumi.set(__self__, "ext_vars", ext_vars)
        if libs is not None:
            pulumi.set(__self__, "libs", libs)
        if tlas is not None:
            pulumi.set(__self__, "tlas", tlas)

    @property
    @pulumi.getter(name="extVars")
    def ext_vars(self) -> Optional[Sequence['outputs.ApplicationStatusSyncComparedToSourceDirectoryJsonnetExtVars']]:
        """
        ExtVars is a list of Jsonnet External Variables
        """
        return pulumi.get(self, "ext_vars")

    @property
    @pulumi.getter
    def libs(self) -> Optional[Sequence[str]]:
        """
        Additional library search dirs
        """
        return pulumi.get(self, "libs")

    @property
    @pulumi.getter
    def tlas(self) -> Optional[Sequence['outputs.ApplicationStatusSyncComparedToSourceDirectoryJsonnetTlas']]:
        """
        TLAS is a list of Jsonnet Top-level Arguments
        """
        return pulumi.get(self, "tlas")


@pulumi.output_type
class ApplicationStatusSyncComparedToSourceDirectoryJsonnetExtVars(dict):
    """
    JsonnetVar represents a variable to be passed to jsonnet during manifest generation
    """
    def __init__(__self__, *,
                 name: str,
                 value: str,
                 code: Optional[bool] = None):
        """
        JsonnetVar represents a variable to be passed to jsonnet during manifest generation
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)
        if code is not None:
            pulumi.set(__self__, "code", code)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def code(self) -> Optional[bool]:
        return pulumi.get(self, "code")


@pulumi.output_type
class ApplicationStatusSyncComparedToSourceDirectoryJsonnetTlas(dict):
    """
    JsonnetVar represents a variable to be passed to jsonnet during manifest generation
    """
    def __init__(__self__, *,
                 name: str,
                 value: str,
                 code: Optional[bool] = None):
        """
        JsonnetVar represents a variable to be passed to jsonnet during manifest generation
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)
        if code is not None:
            pulumi.set(__self__, "code", code)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def code(self) -> Optional[bool]:
        return pulumi.get(self, "code")


@pulumi.output_type
class ApplicationStatusSyncComparedToSourceHelm(dict):
    """
    Helm holds helm specific options
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fileParameters":
            suggest = "file_parameters"
        elif key == "passCredentials":
            suggest = "pass_credentials"
        elif key == "releaseName":
            suggest = "release_name"
        elif key == "valueFiles":
            suggest = "value_files"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationStatusSyncComparedToSourceHelm. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationStatusSyncComparedToSourceHelm.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationStatusSyncComparedToSourceHelm.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 file_parameters: Optional[Sequence['outputs.ApplicationStatusSyncComparedToSourceHelmFileParameters']] = None,
                 parameters: Optional[Sequence['outputs.ApplicationStatusSyncComparedToSourceHelmParameters']] = None,
                 pass_credentials: Optional[bool] = None,
                 release_name: Optional[str] = None,
                 value_files: Optional[Sequence[str]] = None,
                 values: Optional[str] = None,
                 version: Optional[str] = None):
        """
        Helm holds helm specific options
        :param Sequence['ApplicationStatusSyncComparedToSourceHelmFileParametersArgs'] file_parameters: FileParameters are file parameters to the helm template
        :param Sequence['ApplicationStatusSyncComparedToSourceHelmParametersArgs'] parameters: Parameters is a list of Helm parameters which are passed to the helm template command upon manifest generation
        :param bool pass_credentials: PassCredentials pass credentials to all domains (Helm's --pass-credentials)
        :param str release_name: ReleaseName is the Helm release name to use. If omitted it will use the application name
        :param Sequence[str] value_files: ValuesFiles is a list of Helm value files to use when generating a template
        :param str values: Values specifies Helm values to be passed to helm template, typically defined as a block
        :param str version: Version is the Helm version to use for templating (either "2" or "3")
        """
        if file_parameters is not None:
            pulumi.set(__self__, "file_parameters", file_parameters)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if pass_credentials is not None:
            pulumi.set(__self__, "pass_credentials", pass_credentials)
        if release_name is not None:
            pulumi.set(__self__, "release_name", release_name)
        if value_files is not None:
            pulumi.set(__self__, "value_files", value_files)
        if values is not None:
            pulumi.set(__self__, "values", values)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="fileParameters")
    def file_parameters(self) -> Optional[Sequence['outputs.ApplicationStatusSyncComparedToSourceHelmFileParameters']]:
        """
        FileParameters are file parameters to the helm template
        """
        return pulumi.get(self, "file_parameters")

    @property
    @pulumi.getter
    def parameters(self) -> Optional[Sequence['outputs.ApplicationStatusSyncComparedToSourceHelmParameters']]:
        """
        Parameters is a list of Helm parameters which are passed to the helm template command upon manifest generation
        """
        return pulumi.get(self, "parameters")

    @property
    @pulumi.getter(name="passCredentials")
    def pass_credentials(self) -> Optional[bool]:
        """
        PassCredentials pass credentials to all domains (Helm's --pass-credentials)
        """
        return pulumi.get(self, "pass_credentials")

    @property
    @pulumi.getter(name="releaseName")
    def release_name(self) -> Optional[str]:
        """
        ReleaseName is the Helm release name to use. If omitted it will use the application name
        """
        return pulumi.get(self, "release_name")

    @property
    @pulumi.getter(name="valueFiles")
    def value_files(self) -> Optional[Sequence[str]]:
        """
        ValuesFiles is a list of Helm value files to use when generating a template
        """
        return pulumi.get(self, "value_files")

    @property
    @pulumi.getter
    def values(self) -> Optional[str]:
        """
        Values specifies Helm values to be passed to helm template, typically defined as a block
        """
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        """
        Version is the Helm version to use for templating (either "2" or "3")
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class ApplicationStatusSyncComparedToSourceHelmFileParameters(dict):
    """
    HelmFileParameter is a file parameter that's passed to helm template during manifest generation
    """
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 path: Optional[str] = None):
        """
        HelmFileParameter is a file parameter that's passed to helm template during manifest generation
        :param str name: Name is the name of the Helm parameter
        :param str path: Path is the path to the file containing the values for the Helm parameter
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if path is not None:
            pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name is the name of the Helm parameter
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        """
        Path is the path to the file containing the values for the Helm parameter
        """
        return pulumi.get(self, "path")


@pulumi.output_type
class ApplicationStatusSyncComparedToSourceHelmParameters(dict):
    """
    HelmParameter is a parameter that's passed to helm template during manifest generation
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "forceString":
            suggest = "force_string"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationStatusSyncComparedToSourceHelmParameters. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationStatusSyncComparedToSourceHelmParameters.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationStatusSyncComparedToSourceHelmParameters.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 force_string: Optional[bool] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        HelmParameter is a parameter that's passed to helm template during manifest generation
        :param bool force_string: ForceString determines whether to tell Helm to interpret booleans and numbers as strings
        :param str name: Name is the name of the Helm parameter
        :param str value: Value is the value for the Helm parameter
        """
        if force_string is not None:
            pulumi.set(__self__, "force_string", force_string)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="forceString")
    def force_string(self) -> Optional[bool]:
        """
        ForceString determines whether to tell Helm to interpret booleans and numbers as strings
        """
        return pulumi.get(self, "force_string")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name is the name of the Helm parameter
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value is the value for the Helm parameter
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationStatusSyncComparedToSourceKsonnet(dict):
    """
    Ksonnet holds ksonnet specific options
    """
    def __init__(__self__, *,
                 environment: Optional[str] = None,
                 parameters: Optional[Sequence['outputs.ApplicationStatusSyncComparedToSourceKsonnetParameters']] = None):
        """
        Ksonnet holds ksonnet specific options
        :param str environment: Environment is a ksonnet application environment name
        :param Sequence['ApplicationStatusSyncComparedToSourceKsonnetParametersArgs'] parameters: Parameters are a list of ksonnet component parameter override values
        """
        if environment is not None:
            pulumi.set(__self__, "environment", environment)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)

    @property
    @pulumi.getter
    def environment(self) -> Optional[str]:
        """
        Environment is a ksonnet application environment name
        """
        return pulumi.get(self, "environment")

    @property
    @pulumi.getter
    def parameters(self) -> Optional[Sequence['outputs.ApplicationStatusSyncComparedToSourceKsonnetParameters']]:
        """
        Parameters are a list of ksonnet component parameter override values
        """
        return pulumi.get(self, "parameters")


@pulumi.output_type
class ApplicationStatusSyncComparedToSourceKsonnetParameters(dict):
    """
    KsonnetParameter is a ksonnet component parameter
    """
    def __init__(__self__, *,
                 name: str,
                 value: str,
                 component: Optional[str] = None):
        """
        KsonnetParameter is a ksonnet component parameter
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)
        if component is not None:
            pulumi.set(__self__, "component", component)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def component(self) -> Optional[str]:
        return pulumi.get(self, "component")


@pulumi.output_type
class ApplicationStatusSyncComparedToSourceKustomize(dict):
    """
    Kustomize holds kustomize specific options
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "commonAnnotations":
            suggest = "common_annotations"
        elif key == "commonLabels":
            suggest = "common_labels"
        elif key == "forceCommonAnnotations":
            suggest = "force_common_annotations"
        elif key == "forceCommonLabels":
            suggest = "force_common_labels"
        elif key == "namePrefix":
            suggest = "name_prefix"
        elif key == "nameSuffix":
            suggest = "name_suffix"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationStatusSyncComparedToSourceKustomize. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationStatusSyncComparedToSourceKustomize.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationStatusSyncComparedToSourceKustomize.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 common_annotations: Optional[Mapping[str, str]] = None,
                 common_labels: Optional[Mapping[str, str]] = None,
                 force_common_annotations: Optional[bool] = None,
                 force_common_labels: Optional[bool] = None,
                 images: Optional[Sequence[str]] = None,
                 name_prefix: Optional[str] = None,
                 name_suffix: Optional[str] = None,
                 version: Optional[str] = None):
        """
        Kustomize holds kustomize specific options
        :param Mapping[str, str] common_annotations: CommonAnnotations is a list of additional annotations to add to rendered manifests
        :param Mapping[str, str] common_labels: CommonLabels is a list of additional labels to add to rendered manifests
        :param bool force_common_annotations: ForceCommonAnnotations specifies whether to force applying common annotations to resources for Kustomize apps
        :param bool force_common_labels: ForceCommonLabels specifies whether to force applying common labels to resources for Kustomize apps
        :param Sequence[str] images: Images is a list of Kustomize image override specifications
        :param str name_prefix: NamePrefix is a prefix appended to resources for Kustomize apps
        :param str name_suffix: NameSuffix is a suffix appended to resources for Kustomize apps
        :param str version: Version controls which version of Kustomize to use for rendering manifests
        """
        if common_annotations is not None:
            pulumi.set(__self__, "common_annotations", common_annotations)
        if common_labels is not None:
            pulumi.set(__self__, "common_labels", common_labels)
        if force_common_annotations is not None:
            pulumi.set(__self__, "force_common_annotations", force_common_annotations)
        if force_common_labels is not None:
            pulumi.set(__self__, "force_common_labels", force_common_labels)
        if images is not None:
            pulumi.set(__self__, "images", images)
        if name_prefix is not None:
            pulumi.set(__self__, "name_prefix", name_prefix)
        if name_suffix is not None:
            pulumi.set(__self__, "name_suffix", name_suffix)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="commonAnnotations")
    def common_annotations(self) -> Optional[Mapping[str, str]]:
        """
        CommonAnnotations is a list of additional annotations to add to rendered manifests
        """
        return pulumi.get(self, "common_annotations")

    @property
    @pulumi.getter(name="commonLabels")
    def common_labels(self) -> Optional[Mapping[str, str]]:
        """
        CommonLabels is a list of additional labels to add to rendered manifests
        """
        return pulumi.get(self, "common_labels")

    @property
    @pulumi.getter(name="forceCommonAnnotations")
    def force_common_annotations(self) -> Optional[bool]:
        """
        ForceCommonAnnotations specifies whether to force applying common annotations to resources for Kustomize apps
        """
        return pulumi.get(self, "force_common_annotations")

    @property
    @pulumi.getter(name="forceCommonLabels")
    def force_common_labels(self) -> Optional[bool]:
        """
        ForceCommonLabels specifies whether to force applying common labels to resources for Kustomize apps
        """
        return pulumi.get(self, "force_common_labels")

    @property
    @pulumi.getter
    def images(self) -> Optional[Sequence[str]]:
        """
        Images is a list of Kustomize image override specifications
        """
        return pulumi.get(self, "images")

    @property
    @pulumi.getter(name="namePrefix")
    def name_prefix(self) -> Optional[str]:
        """
        NamePrefix is a prefix appended to resources for Kustomize apps
        """
        return pulumi.get(self, "name_prefix")

    @property
    @pulumi.getter(name="nameSuffix")
    def name_suffix(self) -> Optional[str]:
        """
        NameSuffix is a suffix appended to resources for Kustomize apps
        """
        return pulumi.get(self, "name_suffix")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        """
        Version controls which version of Kustomize to use for rendering manifests
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class ApplicationStatusSyncComparedToSourcePlugin(dict):
    """
    ConfigManagementPlugin holds config management plugin specific options
    """
    def __init__(__self__, *,
                 env: Optional[Sequence['outputs.ApplicationStatusSyncComparedToSourcePluginEnv']] = None,
                 name: Optional[str] = None):
        """
        ConfigManagementPlugin holds config management plugin specific options
        :param Sequence['ApplicationStatusSyncComparedToSourcePluginEnvArgs'] env: Env is a list of environment variable entries
        """
        if env is not None:
            pulumi.set(__self__, "env", env)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def env(self) -> Optional[Sequence['outputs.ApplicationStatusSyncComparedToSourcePluginEnv']]:
        """
        Env is a list of environment variable entries
        """
        return pulumi.get(self, "env")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class ApplicationStatusSyncComparedToSourcePluginEnv(dict):
    """
    EnvEntry represents an entry in the application's environment
    """
    def __init__(__self__, *,
                 name: str,
                 value: str):
        """
        EnvEntry represents an entry in the application's environment
        :param str name: Name is the name of the variable, usually expressed in uppercase
        :param str value: Value is the value of the variable
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name is the name of the variable, usually expressed in uppercase
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value is the value of the variable
        """
        return pulumi.get(self, "value")


